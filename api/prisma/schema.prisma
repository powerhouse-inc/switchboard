generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CoreUnit {
  id                              String @id @default(uuid())
  code                            String
  shortCode                       String
  name                            String
  imageSource                     String
  descriptionSentence             String
  descriptionParagraph            String
  descriptionParagraphImageSource String
}

model User {
  address   String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
}

model Session {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  createdBy           String
  referenceExpiryDate DateTime?
  name                String?
  revokedAt           DateTime?
  referenceTokenId    String
  isUserCreated       Boolean   @default(false)
  allowedOrigins      String // comma separated strings
  creator             User      @relation(fields: [createdBy], references: [address], onDelete: Cascade)

  @@unique([createdBy, id])
}

model Challenge {
  nonce     String   @id
  message   String   @unique
  signature String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Document Drive
model Document {
  id                  String
  driveId             String
  created             DateTime             @default(now())
  lastModified        DateTime             @default(now())
  revision            Json
  name                String?
  operations          Operation[]
  initialState        Json // json object with the scope as keys of the root object
  documentType        String
  syncronizationUnits SyncronizationUnit[]

  @@id([id, driveId])
}

model Operation {
  id          String       @id @default(uuid())
  driveId     String
  Document    Document?    @relation(fields: [driveId, documentId], references: [driveId, id], onDelete: Cascade)
  documentId  String
  scope       String
  branch      String
  index       Int
  skip        Int
  hash        String
  timestamp   DateTime
  input       Json
  type        String
  attachments Attachment[]
  syncId      String?
  clipboard   Boolean?     @default(false)

  SyncronizationUnit SyncronizationUnit? @relation(fields: [syncId, driveId], references: [id, driveId], onDelete: Cascade)
}

model SyncronizationUnit {
  id         String
  driveId    String
  documentId String

  Document   Document    @relation(fields: [documentId, driveId], references: [id, driveId], onDelete: Cascade)
  scope      String
  branch     String
  operations Operation[]

  @@id([id, driveId])
}

model Attachment {
  id          String    @id @default(uuid())
  operationId String
  Operation   Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  mimeType  String
  data      String
  filename  String
  extension String
  hash      String
}

model Listener {
  listenerId String @id @default(uuid())
  driveId    String

  label  String?
  block  Boolean
  system Boolean

  filter   Json
  callInfo Json
}
