/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "../graphql/server/index";
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin.js"
import type { core, connectionPluginCore } from "nexus"
import type { ArgsValidationConfig, HasTypeField } from "nexus-validation-plugin/utils.js"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes { }
}

export interface NexusGenInputs {
  DocumentDriveLocalStateInput: { // input type
    availableOffline: boolean; // Boolean!
    sharingType?: string | null; // String
  }
  DocumentDriveStateInput: { // input type
    icon?: string | null; // String
    id: string; // ID!
    name: string; // String!
    slug?: string | null; // String
  }
  InputListenerFilter: { // input type
    branch?: Array<string | null> | null; // [String]
    documentId?: Array<string | null> | null; // [String]
    documentType?: Array<string | null> | null; // [String]
    scope?: Array<string | null> | null; // [String]
  }
  InputOperationUpdate: { // input type
    hash: string; // String!
    index: number; // Int!
    input: string; // String!
    skip?: number | null; // Int
    timestamp: string; // String!
    type: string; // String!
  }
  InputStrandUpdate: { // input type
    branch: string; // String!
    documentId?: string | null; // String
    driveId: string; // String!
    operations: NexusGenInputs['InputOperationUpdate'][]; // [InputOperationUpdate!]!
    scope: string; // String!
  }
  ListenerRevisionInput: { // input type
    branch: string; // String!
    documentId: string; // String!
    driveId: string; // String!
    revision: number; // Int!
    scope: string; // String!
    status: NexusGenEnums['UpdateStatus']; // UpdateStatus!
  }
  SessionInput: { // input type
    allowedOrigins: string; // String!
    expiryDurationSeconds?: number | null; // Int
    name: string; // String!
  }
}

export interface NexusGenEnums {
  TransmitterType: "Internal" | "MatrixConnect" | "PullResponder" | "RESTWebhook" | "SecureConnect" | "SwitchboardPush"
  UpdateStatus: "CONFLICT" | "ERROR" | "MISSING" | "SUCCESS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  AddDriveResponse: { // root type
    global: NexusGenRootTypes['DocumentDriveState']; // DocumentDriveState!
    local: NexusGenRootTypes['DocumentDriveLocalState']; // DocumentDriveLocalState!
  }
  Challenge: { // root type
    hex: string; // String!
    message: string; // String!
    nonce: string; // String!
  }
  CoreUnit: { // root type
    code?: string | null; // String
    descriptionParagraph?: string | null; // String
    descriptionParagraphImageSource?: string | null; // String
    descriptionSentence?: string | null; // String
    id?: string | null; // String
    imageSource?: string | null; // String
    name?: string | null; // String
    shortCode?: string | null; // String
  }
  DocumentDriveLocalState: { // root type
    availableOffline: boolean; // Boolean!
    sharingType?: string | null; // String
  }
  DocumentDriveState: { // root type
    icon?: string | null; // String
    id: string; // ID!
    name: string; // String!
    nodes: Array<NexusGenRootTypes['Node'] | null>; // [Node]!
    slug?: string | null; // String
  }
  Listener: { // root type
    block: boolean; // Boolean!
    callInfo?: NexusGenRootTypes['ListenerCallInfo'] | null; // ListenerCallInfo
    filter: NexusGenRootTypes['ListenerFilter']; // ListenerFilter!
    label?: string | null; // String
    listenerId: string; // ID!
    system: boolean; // Boolean!
  }
  ListenerCallInfo: { // root type
    data?: string | null; // String
    name?: string | null; // String
    transmitterType?: NexusGenEnums['TransmitterType'] | null; // TransmitterType
  }
  ListenerFilter: { // root type
    branch?: string[] | null; // [String!]
    documentId?: string[] | null; // [ID!]
    documentType: string[]; // [String!]!
    scope?: string[] | null; // [String!]
  }
  ListenerRevision: { // root type
    branch: string; // String!
    documentId?: string | null; // String
    driveId: string; // String!
    revision: number; // Int!
    scope: string; // String!
    status: NexusGenEnums['UpdateStatus']; // UpdateStatus!
  }
  Mutation: {};
  Node: { // root type
    documentType?: string | null; // String
    id: string; // String!
    kind: string; // String!
    name: string; // String!
    parentFolder?: string | null; // String
  }
  OperationUpdate: { // root type
    hash: string; // String!
    index: number; // Int!
    input: string; // String!
    skip: number; // Int!
    timestamp: string; // String!
    type: string; // String!
  }
  Query: {};
  Session: { // root type
    allowedOrigins?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    createdBy: string; // String!
    id: string; // String!
    isUserCreated: boolean; // Boolean!
    name?: string | null; // String
    referenceExpiryDate?: NexusGenScalars['Date'] | null; // Date
    referenceTokenId: string; // String!
    revokedAt?: NexusGenScalars['Date'] | null; // Date
  }
  SessionOutput: { // root type
    session: NexusGenRootTypes['Session']; // Session!
    token: string; // String!
  }
  StrandUpdate: { // root type
    branch: string; // String!
    documentId: string; // String!
    driveId: string; // String!
    operations: NexusGenRootTypes['OperationUpdate'][]; // [OperationUpdate!]!
    scope: string; // String!
  }
  User: { // root type
    address: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AddDriveResponse: { // field return type
    global: NexusGenRootTypes['DocumentDriveState']; // DocumentDriveState!
    local: NexusGenRootTypes['DocumentDriveLocalState']; // DocumentDriveLocalState!
  }
  Challenge: { // field return type
    hex: string; // String!
    message: string; // String!
    nonce: string; // String!
  }
  CoreUnit: { // field return type
    code: string | null; // String
    descriptionParagraph: string | null; // String
    descriptionParagraphImageSource: string | null; // String
    descriptionSentence: string | null; // String
    id: string | null; // String
    imageSource: string | null; // String
    name: string | null; // String
    shortCode: string | null; // String
  }
  DocumentDriveLocalState: { // field return type
    availableOffline: boolean; // Boolean!
    sharingType: string | null; // String
  }
  DocumentDriveState: { // field return type
    icon: string | null; // String
    id: string; // ID!
    name: string; // String!
    nodes: Array<NexusGenRootTypes['Node'] | null>; // [Node]!
    slug: string | null; // String
  }
  Listener: { // field return type
    block: boolean; // Boolean!
    callInfo: NexusGenRootTypes['ListenerCallInfo'] | null; // ListenerCallInfo
    filter: NexusGenRootTypes['ListenerFilter']; // ListenerFilter!
    label: string | null; // String
    listenerId: string; // ID!
    system: boolean; // Boolean!
  }
  ListenerCallInfo: { // field return type
    data: string | null; // String
    name: string | null; // String
    transmitterType: NexusGenEnums['TransmitterType'] | null; // TransmitterType
  }
  ListenerFilter: { // field return type
    branch: string[] | null; // [String!]
    documentId: string[] | null; // [ID!]
    documentType: string[]; // [String!]!
    scope: string[] | null; // [String!]
  }
  ListenerRevision: { // field return type
    branch: string; // String!
    documentId: string | null; // String
    driveId: string; // String!
    revision: number; // Int!
    scope: string; // String!
    status: NexusGenEnums['UpdateStatus']; // UpdateStatus!
  }
  Mutation: { // field return type
    acknowledge: boolean | null; // Boolean
    addDrive: NexusGenRootTypes['AddDriveResponse'] | null; // AddDriveResponse
    createChallenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    createSession: NexusGenRootTypes['SessionOutput'] | null; // SessionOutput
    deleteDrive: boolean | null; // Boolean
    pushUpdates: Array<NexusGenRootTypes['ListenerRevision'] | null> | null; // [ListenerRevision]
    registerPullResponderListener: NexusGenRootTypes['Listener'] | null; // Listener
    revokeSession: NexusGenRootTypes['Session'] | null; // Session
    solveChallenge: NexusGenRootTypes['SessionOutput'] | null; // SessionOutput
  }
  Node: { // field return type
    documentType: string | null; // String
    id: string; // String!
    kind: string; // String!
    name: string; // String!
    parentFolder: string | null; // String
  }
  OperationUpdate: { // field return type
    hash: string; // String!
    index: number; // Int!
    input: string; // String!
    skip: number; // Int!
    timestamp: string; // String!
    type: string; // String!
  }
  Query: { // field return type
    coreUnit: NexusGenRootTypes['CoreUnit'] | null; // CoreUnit
    coreUnits: Array<NexusGenRootTypes['CoreUnit'] | null> | null; // [CoreUnit]
    drive: NexusGenRootTypes['DocumentDriveState'] | null; // DocumentDriveState
    drives: Array<string | null> | null; // [String]
    me: NexusGenRootTypes['User'] | null; // User
    sessions: Array<NexusGenRootTypes['Session'] | null> | null; // [Session]
    strands: Array<NexusGenRootTypes['StrandUpdate'] | null> | null; // [StrandUpdate]
    strandsSince: Array<NexusGenRootTypes['StrandUpdate'] | null> | null; // [StrandUpdate]
  }
  Session: { // field return type
    allowedOrigins: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    createdBy: string; // String!
    id: string; // String!
    isUserCreated: boolean; // Boolean!
    name: string | null; // String
    referenceExpiryDate: NexusGenScalars['Date'] | null; // Date
    referenceTokenId: string; // String!
    revokedAt: NexusGenScalars['Date'] | null; // Date
  }
  SessionOutput: { // field return type
    session: NexusGenRootTypes['Session']; // Session!
    token: string; // String!
  }
  StrandUpdate: { // field return type
    branch: string; // String!
    documentId: string; // String!
    driveId: string; // String!
    operations: NexusGenRootTypes['OperationUpdate'][]; // [OperationUpdate!]!
    scope: string; // String!
  }
  User: { // field return type
    address: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenFieldTypeNames {
  AddDriveResponse: { // field return type name
    global: 'DocumentDriveState'
    local: 'DocumentDriveLocalState'
  }
  Challenge: { // field return type name
    hex: 'String'
    message: 'String'
    nonce: 'String'
  }
  CoreUnit: { // field return type name
    code: 'String'
    descriptionParagraph: 'String'
    descriptionParagraphImageSource: 'String'
    descriptionSentence: 'String'
    id: 'String'
    imageSource: 'String'
    name: 'String'
    shortCode: 'String'
  }
  DocumentDriveLocalState: { // field return type name
    availableOffline: 'Boolean'
    sharingType: 'String'
  }
  DocumentDriveState: { // field return type name
    icon: 'String'
    id: 'ID'
    name: 'String'
    nodes: 'Node'
    slug: 'String'
  }
  Listener: { // field return type name
    block: 'Boolean'
    callInfo: 'ListenerCallInfo'
    filter: 'ListenerFilter'
    label: 'String'
    listenerId: 'ID'
    system: 'Boolean'
  }
  ListenerCallInfo: { // field return type name
    data: 'String'
    name: 'String'
    transmitterType: 'TransmitterType'
  }
  ListenerFilter: { // field return type name
    branch: 'String'
    documentId: 'ID'
    documentType: 'String'
    scope: 'String'
  }
  ListenerRevision: { // field return type name
    branch: 'String'
    documentId: 'String'
    driveId: 'String'
    revision: 'Int'
    scope: 'String'
    status: 'UpdateStatus'
  }
  Mutation: { // field return type name
    acknowledge: 'Boolean'
    addDrive: 'AddDriveResponse'
    createChallenge: 'Challenge'
    createSession: 'SessionOutput'
    deleteDrive: 'Boolean'
    pushUpdates: 'ListenerRevision'
    registerPullResponderListener: 'Listener'
    revokeSession: 'Session'
    solveChallenge: 'SessionOutput'
  }
  Node: { // field return type name
    documentType: 'String'
    id: 'String'
    kind: 'String'
    name: 'String'
    parentFolder: 'String'
  }
  OperationUpdate: { // field return type name
    hash: 'String'
    index: 'Int'
    input: 'String'
    skip: 'Int'
    timestamp: 'String'
    type: 'String'
  }
  Query: { // field return type name
    coreUnit: 'CoreUnit'
    coreUnits: 'CoreUnit'
    drive: 'DocumentDriveState'
    drives: 'String'
    me: 'User'
    sessions: 'Session'
    strands: 'StrandUpdate'
    strandsSince: 'StrandUpdate'
  }
  Session: { // field return type name
    allowedOrigins: 'String'
    createdAt: 'Date'
    createdBy: 'String'
    id: 'String'
    isUserCreated: 'Boolean'
    name: 'String'
    referenceExpiryDate: 'Date'
    referenceTokenId: 'String'
    revokedAt: 'Date'
  }
  SessionOutput: { // field return type name
    session: 'Session'
    token: 'String'
  }
  StrandUpdate: { // field return type name
    branch: 'String'
    documentId: 'String'
    driveId: 'String'
    operations: 'OperationUpdate'
    scope: 'String'
  }
  User: { // field return type name
    address: 'String'
    createdAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    acknowledge: { // args
      listenerId: string; // String!
      revisions?: Array<NexusGenInputs['ListenerRevisionInput'] | null> | null; // [ListenerRevisionInput]
    }
    addDrive: { // args
      global: NexusGenInputs['DocumentDriveStateInput']; // DocumentDriveStateInput!
      local: NexusGenInputs['DocumentDriveLocalStateInput']; // DocumentDriveLocalStateInput!
    }
    createChallenge: { // args
      address: string; // String!
    }
    createSession: { // args
      session: NexusGenInputs['SessionInput']; // SessionInput!
    }
    deleteDrive: { // args
      id: string; // String!
    }
    pushUpdates: { // args
      strands?: NexusGenInputs['InputStrandUpdate'][] | null; // [InputStrandUpdate!]
    }
    registerPullResponderListener: { // args
      filter: NexusGenInputs['InputListenerFilter']; // InputListenerFilter!
    }
    revokeSession: { // args
      sessionId: string; // String!
    }
    solveChallenge: { // args
      nonce: string; // String!
      signature: string; // String!
    }
  }
  Query: {
    coreUnit: { // args
      id?: string | null; // String
    }
    strands: { // args
      listenerId?: string | null; // ID
    }
    strandsSince: { // args
      listenerId?: string | null; // ID
      since?: NexusGenScalars['Date'] | null; // Date
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>

    /**
     * Async validation function. Reject when validation fails. Resolve otherwise.
     */
    validate?:
    NexusGenArgTypes extends HasTypeField<TypeName, FieldName>
    ? ArgsValidationConfig<NexusGenArgTypes[TypeName][FieldName]>
    : never

  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}