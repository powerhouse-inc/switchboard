### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  id: ID!
  label: String
  reference: String!
}

type AccountSnapshot implements IDocument {
  created: Date!
  documentType: String!
  id: String!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
  state: AccountSnapshotState!
}

type AccountSnapshotState {
  actualsComparison: [ActualsComparison]
  end: String
  id: ID!
  ownerId: ID
  ownerType: String
  period: String
  snapshotAccount: [SnapshotAccount]
  start: String
}

type ActualsComparison {
  currency: String
  month: String
  netExpenses: ActualsComparisonNetExpenses
  reportedActuals: Float
}

type ActualsComparisonNetExpenses {
  offChainIncluded: ActualsComparisonNetExpensesItem
  onChainOnly: ActualsComparisonNetExpensesItem!
}

type ActualsComparisonNetExpensesItem {
  amount: Float
  difference: Float
}

type AddElementInput {
  components: ElementComponents
  id: String!
  name: String
  path: String!
  type: ScopeFrameworkElementType!
}

type ArticleComponent {
  content: String
}

union Asset = Cash | FixedIncome

enum AssetType {
  Cash
  FixedIncome
}

"""Attachment custom scalar type"""
scalar Attachment

type AuditReport {
  report: Attachment!
  status: AuditReportStatus!
  timestamp: Date!
}

enum AuditReportStatus {
  Approved
  ApprovedWithComments
  Escalated
  NeedsAction
}

type Auth {
  me: User
  sessions: [Session]
}

type BaseTransaction {
  accountId: ID
  amount: Float!
  assetId: ID!
  assetType: AssetType!
  counterPartyAccountId: ID
  entryTime: DateTime!
  id: ID!
  settlementTime: DateTime
  tradeTime: DateTime
}

type BudgetStatement implements IDocument {
  created: Date!
  documentType: String!
  id: String!
  initialState: BudgetStatementState!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
  state: BudgetStatementState!
}

type BudgetStatementAccount {
  address: String!
  lineItems: [LineItem!]!
  name: String!
}

type BudgetStatementState {
  accounts: [BudgetStatementAccount!]!
  auditReports: [AuditReport!]!
  comments: [Comment!]!
  ftes: Ftes
  month: String
  owner: Owner
  quoteCurrency: String
  vesting: [Vesting!]!
}

enum BudgetStatus {
  Draft
  Escalated
  Final
  Review
}

type Cash {
  balance: Float!
  currency: String!
  id: ID!
  spvId: ID!
  type: AssetType!
}

type Challenge {
  hex: String!
  message: String!
  nonce: String!
}

type Comment {
  author: CommentAuthor!
  comment: String!
  key: String!
  status: BudgetStatus!
  timestamp: Date!
}

type CommentAuthor {
  id: String
  ref: String
  roleLabel: String
  username: String
}

type CoreComponent {
  content: String
}

type CoreUnit {
  code: String
  descriptionParagraph: String
  descriptionParagraphImageSource: String
  descriptionSentence: String
  id: String
  imageSource: String
  name: String
  shortCode: String
}

"""Date custom scalar type"""
scalar Date

scalar DateTime

type DefaultDocument implements IDocument {
  created: Date!
  documentType: String!
  id: String!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
}

type DefaultOperation implements IOperation {
  error: String
  hash: String!
  id: String
  index: Int!
  inputText: String!
  skip: Int!
  timestamp: Date!
  type: String!
}

type DocumentDrive implements IDocument {
  created: Date!
  documentType: String!
  id: String!
  initialState: DocumentDriveState!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
  state: DocumentDriveState!
}

type DocumentDriveLocalState {
  availableOffline: Boolean!
  listeners: [Listener!]!
  sharingType: String
  triggers: [Trigger!]!
}

type DocumentDriveState {
  icon: String
  id: ID!
  name: String!
  nodes: [Node!]!
  slug: String
}

union ElementComponents = ArticleComponent | CoreComponent | ScopeComponent | SectionComponent | TypeSpecificationComponent

type FileNode implements Node {
  documentType: String!
  id: String!
  kind: String!
  name: String!
  parentFolder: String
  synchronizationUnits: [SynchronizationUnit!]!
}

type FixedIncome {
  CUSIP: String
  ISIN: String
  assetProceeds: Float!
  coupon: Float
  currentValue(date: DateTime): Float
  fixedIncomeTypeId: ID!
  id: ID!
  maturity: DateTime
  name: String!
  notional: Float!
  purchaseDate: DateTime!
  purchasePrice: Float!
  purchaseProceeds: Float!
  realizedSurplus: Float!
  salesProceeds: Float!
  spvId: ID!
  totalDiscount: Float!
  type: AssetType!
}

type FixedIncomeType {
  id: ID!
  name: String!
}

type FolderNode implements Node {
  id: String!
  kind: String!
  name: String!
  parentFolder: String
}

type Ftes {
  forecast: [FtesForecast!]!
  value: Float!
}

type FtesForecast {
  month: String!
  value: Float!
}

type GroupTransaction {
  cashBalanceChange: Float!
  cashTransaction: BaseTransaction!
  entryTime: DateTime!
  fees: [TransactionFee!]
  fixedIncomeTransaction: BaseTransaction
  id: ID!
  serviceProviderFeeTypeId: ID
  txRef: String
  type: GroupTransactionType!
  unitPrice: Float
}

enum GroupTransactionType {
  AssetPurchase
  AssetSale
  FeesIncome
  FeesPayment
  InterestIncome
  InterestPayment
  PrincipalDraw
  PrincipalReturn
}

interface IDocument {
  created: Date!
  documentType: String!
  id: String!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
}

interface IOperation {
  error: String
  hash: String!
  id: String
  index: Int!
  inputText: String!
  skip: Int!
  timestamp: Date!
  type: String!
}

input InputListenerFilter {
  branch: [String]
  documentId: [String]
  documentType: [String]
  scope: [String]
}

input InputOperationContext {
  signer: InputOperationSigner
}

input InputOperationSigner {
  app: InputOperationSignerApp!
  signatures: [[String!]!]!
  user: InputOperationSignerUser!
}

input InputOperationSignerApp {
  key: String!
  name: String!
}

input InputOperationSignerUser {
  address: String!
  chainId: Int!
  networkId: String!
}

input InputOperationUpdate {
  context: InputOperationContext
  error: String
  hash: String!
  id: String
  index: Int!
  input: String!
  skip: Int
  timestamp: String!
  type: String!
}

input InputStrandUpdate {
  branch: String!
  documentId: String
  driveId: String!
  operations: [InputOperationUpdate!]!
  scope: String!
}

type LineItem {
  actual: Float
  budgetCap: Float
  category: LineItemCategory
  comment: String
  forecast: [LineItemForecast!]!
  group: LineItemGroup
  headcountExpense: Boolean!
  payment: Float
}

type LineItemCategory {
  id: String!
  ref: String!
  title: String!
}

type LineItemForecast {
  budgetCap: Float!
  month: String!
  value: Float!
}

type LineItemGroup {
  color: String!
  id: String!
  ref: String!
  title: String!
}

type Listener {
  block: Boolean!
  callInfo: ListenerCallInfo
  filter: ListenerFilter!
  label: String
  listenerId: ID!
  system: Boolean!
}

type ListenerCallInfo {
  data: String
  name: String
  transmitterType: TransmitterType
}

type ListenerFilter {
  branch: [String!]
  documentId: [ID!]
  documentType: [String!]!
  scope: [String!]
}

type ListenerRevision {
  branch: String!
  documentId: String
  driveId: String!
  error: String
  revision: Int!
  scope: String!
  status: UpdateStatus!
}

input ListenerRevisionInput {
  branch: String!
  documentId: String!
  driveId: String!
  revision: Int!
  scope: String!
  status: UpdateStatus!
}

type MoveElementInput {
  id: ID!
  newParentId: ID!
}

type Mutation {
  acknowledge(listenerId: String!, revisions: [ListenerRevisionInput]): Boolean
  createChallenge(address: String!): Challenge
  createSession(session: SessionInput!): SessionOutput
  deletePullResponderListener(listenerId: String!): Boolean
  pushUpdates(strands: [InputStrandUpdate!]): [ListenerRevision]
  registerPullResponderListener(filter: InputListenerFilter!): Listener
  revokeSession(sessionId: String!): Session
  solveChallenge(nonce: String!, signature: String!): SessionOutput
}

interface Node {
  id: String!
  kind: String!
  name: String!
  parentFolder: String
}

type OperationContext {
  signer: OperationSigner
}

type OperationSigner {
  app: OperationSignerApp!
  signatures: [[String!]!]!
  user: OperationSignerUser!
}

type OperationSignerApp {
  key: String!
  name: String!
}

type OperationSignerUser {
  address: String!
  chainId: Int!
  networkId: String!
}

type OperationUpdate {
  context: OperationContext
  error: String
  hash: String!
  id: String
  index: Int!
  input: String!
  skip: Int!
  timestamp: String!
  type: String!
}

type Owner {
  id: String
  ref: String
  title: String
}

type PullResponderTriggerData {
  interval: String!
  listenerId: ID!
  url: String!
}

type Query {
  coreUnit(id: String): CoreUnit
  coreUnits: [CoreUnit]
  document(id: String!): IDocument
  documents: [IDocument]
  drive: DocumentDriveState
  rwaPortfolios(id: String): [RealWorldAssets]
  system: SwitchboardDrive
}

type RealWorldAssets implements IDocument {
  created: Date!
  documentType: String!
  id: String!
  initialState: RealWorldAssetsState!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
  state: RealWorldAssetsState!
}

type RealWorldAssetsState {
  accounts: [Account!]!
  fixedIncomeTypes: [FixedIncomeType!]!
  portfolio: [Asset!]!
  principalLenderAccountId: ID!
  serviceProviderFeeTypes: [ServiceProviderFeeType!]!
  spvs: [Spv!]!
  transactions: [GroupTransaction!]!
}

type RemoveElementInput {
  id: ID!
}

type ReorderElementsInput {
  order: [ID!]!
  parentElementId: ID!
}

type ScopeComponent {
  content: String
}

type ScopeFramework implements IDocument {
  created: Date!
  documentType: String!
  id: String!
  initialState: ScopeFrameworkState!
  lastModified: Date!
  name: String!
  operations(first: Int, skip: Int): [DefaultOperation!]!
  revision: Int!
  state: ScopeFrameworkState!
}

type ScopeFrameworkElement {
  components: ElementComponents
  id: ID!
  name: String
  path: String!
  type: ScopeFrameworkElementType
  version: Int!
}

enum ScopeFrameworkElementType {
  Article
  Core
  Scope
  Section
  TypeSpecification
}

type ScopeFrameworkState {
  elements: [ScopeFrameworkElement!]!
  rootPath: String!
}

type SectionComponent {
  content: String
}

type ServiceProviderFeeType {
  accountId: ID!
  feeType: String!
  id: ID!
  name: String!
}

type Session {
  allowedOrigins: String
  createdAt: Date!
  createdBy: String!
  id: String!
  isUserCreated: Boolean!
  name: String
  referenceExpiryDate: Date
  referenceTokenId: String!
  revokedAt: Date
}

input SessionInput {
  allowedOrigins: String!
  expiryDurationSeconds: Int
  name: String!
}

type SessionOutput {
  session: Session!
  token: String!
}

input SetEndInput {
  end: String!
}

input SetIdInput {
  id: ID!
}

input SetOwnerIdInput {
  ownerId: ID!
}

input SetOwnerTypeInput {
  ownerType: String!
}

input SetPeriodInput {
  period: String!
}

type SetRootPathInput {
  newRootPath: String!
}

input SetStartInput {
  start: String!
}

type SnapshotAccount {
  accountAddress: String
  accountLabel: String
  accountType: String
  groupAccountId: ID
  id: ID!
  offChain: Boolean
  snapshotAccountBalance: [SnapshotAccountBalance]
  snapshotAccountTransaction: [SnapshotAccountTransaction]
  upstreamAccountId: ID
}

type SnapshotAccountBalance {
  id: ID
  includesOffChain: Boolean
  inflow: Float
  initialBalance: Float
  newBalance: Float
  outflow: Float
  token: String
}

type SnapshotAccountTransaction {
  amount: Float
  block: Int
  counterParty: String
  counterPartyName: String
  id: ID!
  timestamp: String
  token: String
  txHash: String
  txLabel: String
}

type Spv {
  id: ID!
  name: String!
}

type StrandUpdate {
  branch: String!
  documentId: String!
  driveId: String!
  operations: [OperationUpdate!]!
  scope: String!
}

type SwitchboardDrive implements System {
  auth: Auth
  sync: Sync
}

type SwitchboardHost implements System {
  auth: Auth
}

type Sync {
  strands(listenerId: ID, since: Date): [StrandUpdate]
}

type SynchronizationUnit {
  branch: String!
  scope: String!
  syncId: ID!
}

interface System {
  auth: Auth
}

type TransactionFee {
  amount: Float!
  id: ID!
  serviceProviderFeeTypeId: ID!
}

enum TransmitterType {
  Internal
  MatrixConnect
  PullResponder
  RESTWebhook
  SecureConnect
  SwitchboardPush
}

type Trigger {
  data: TriggerData
  id: ID!
  type: TriggerType!
}

union TriggerData = PullResponderTriggerData

enum TriggerType {
  PullResponder
}

type TypeSpecificationComponent {
  additionalLogic: String
  category: TypeSpecificationComponentCategory
  documentIdentifierRules: String
  name: String
  overview: String
  typeAuthority: String
}

enum TypeSpecificationComponentCategory {
  Accessory
  Immutable
  Primary
  Supporting
}

scalar Unknown

type UpdateElementComponentsInput {
  components: ElementComponents
  id: ID!
}

type UpdateElementNameInput {
  id: ID!
  name: String
}

type UpdateElementTypeInput {
  id: ID!
  type: ScopeFrameworkElementType!
}

enum UpdateStatus {
  CONFLICT
  ERROR
  MISSING
  SUCCESS
}

type User {
  address: String!
  createdAt: Date!
}

type Vesting {
  amount: String!
  amountOld: String!
  comment: String!
  currency: String!
  date: String!
  key: String!
  vested: Boolean!
}