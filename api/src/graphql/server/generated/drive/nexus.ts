/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../drive/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core, connectionPluginCore } from "nexus"
import type { ArgsValidationConfig, HasTypeField } from "nexus-validation-plugin/utils"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * Attachment custom scalar type
     */
    attachment<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Attachment";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * Attachment custom scalar type
     */
    attachment<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Attachment";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputListenerFilter: { // input type
    branch?: Array<string | null> | null; // [String]
    documentId?: Array<string | null> | null; // [String]
    documentType?: Array<string | null> | null; // [String]
    scope?: Array<string | null> | null; // [String]
  }
  InputOperationContext: { // input type
    signer?: NexusGenInputs['InputOperationSigner'] | null; // InputOperationSigner
  }
  InputOperationSigner: { // input type
    app: NexusGenInputs['InputOperationSignerApp']; // InputOperationSignerApp!
    signatures: string[][]; // [[String!]!]!
    user: NexusGenInputs['InputOperationSignerUser']; // InputOperationSignerUser!
  }
  InputOperationSignerApp: { // input type
    key: string; // String!
    name: string; // String!
  }
  InputOperationSignerUser: { // input type
    address: string; // String!
    chainId: number; // Int!
    networkId: string; // String!
  }
  InputOperationUpdate: { // input type
    context?: NexusGenInputs['InputOperationContext'] | null; // InputOperationContext
    hash: string; // String!
    id?: string | null; // String
    index: number; // Int!
    input: string; // String!
    skip?: number | null; // Int
    timestamp: string; // String!
    type: string; // String!
  }
  InputStrandUpdate: { // input type
    branch: string; // String!
    documentId?: string | null; // String
    driveId: string; // String!
    operations: NexusGenInputs['InputOperationUpdate'][]; // [InputOperationUpdate!]!
    scope: string; // String!
  }
  ListenerRevisionInput: { // input type
    branch: string; // String!
    documentId: string; // String!
    driveId: string; // String!
    revision: number; // Int!
    scope: string; // String!
    status: NexusGenEnums['UpdateStatus']; // UpdateStatus!
  }
  SessionInput: { // input type
    allowedOrigins: string; // String!
    expiryDurationSeconds?: number | null; // Int
    name: string; // String!
  }
  SetEndInput: { // input type
    end: string; // String!
  }
  SetIdInput: { // input type
    id: string; // ID!
  }
  SetOwnerIdInput: { // input type
    ownerId: string; // ID!
  }
  SetOwnerTypeInput: { // input type
    ownerType: string; // String!
  }
  SetPeriodInput: { // input type
    period: string; // String!
  }
  SetStartInput: { // input type
    start: string; // String!
  }
}

export interface NexusGenEnums {
  AuditReportStatus: "Approved" | "ApprovedWithComments" | "Escalated" | "NeedsAction"
  BudgetStatus: "Draft" | "Escalated" | "Final" | "Review"
  GroupTransactionType: "AssetPurchase" | "AssetSale" | "FeesPayment" | "InterestDraw" | "InterestPayment" | "InterestReturn" | "PrincipalDraw" | "PrincipalReturn"
  ScopeFrameworkElementType: "Article" | "Core" | "Scope" | "Section" | "TypeSpecification"
  TransmitterType: "Internal" | "MatrixConnect" | "PullResponder" | "RESTWebhook" | "SecureConnect" | "SwitchboardPush"
  TypeSpecificationComponentCategory: "Accessory" | "Immutable" | "Primary" | "Supporting"
  UpdateStatus: "CONFLICT" | "ERROR" | "MISSING" | "SUCCESS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Attachment: any
  Date: any
}

export interface NexusGenObjects {
  Account: { // root type
    id: string; // ID!
    label?: string | null; // String
    reference: string; // String!
  }
  AccountSnapshot: { // root type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['AccountSnapshotState']; // AccountSnapshotState!
  }
  AccountSnapshotState: { // root type
    actualsComparison?: Array<NexusGenRootTypes['ActualsComparison'] | null> | null; // [ActualsComparison]
    end?: string | null; // String
    id: string; // ID!
    ownerId?: string | null; // ID
    ownerType?: string | null; // String
    period?: string | null; // String
    snapshotAccount?: Array<NexusGenRootTypes['SnapshotAccount'] | null> | null; // [SnapshotAccount]
    start?: string | null; // String
  }
  ActualsComparison: { // root type
    currency?: string | null; // String
    month?: string | null; // String
    netExpenses?: NexusGenRootTypes['ActualsComparisonNetExpenses'] | null; // ActualsComparisonNetExpenses
    reportedActuals?: number | null; // Float
  }
  ActualsComparisonNetExpenses: { // root type
    offChainIncluded?: NexusGenRootTypes['ActualsComparisonNetExpensesItem'] | null; // ActualsComparisonNetExpensesItem
    onChainOnly: NexusGenRootTypes['ActualsComparisonNetExpensesItem']; // ActualsComparisonNetExpensesItem!
  }
  ActualsComparisonNetExpensesItem: { // root type
    amount?: number | null; // Float
    difference?: number | null; // Float
  }
  AddElementInput: { // root type
    components?: NexusGenRootTypes['ElementComponents'] | null; // ElementComponents
    id: string; // String!
    name?: string | null; // String
    path: string; // String!
    type: NexusGenEnums['ScopeFrameworkElementType']; // ScopeFrameworkElementType!
  }
  ArticleComponent: { // root type
    content?: string | null; // String
  }
  AuditReport: { // root type
    report: NexusGenScalars['Attachment']; // Attachment!
    status: NexusGenEnums['AuditReportStatus']; // AuditReportStatus!
    timestamp: NexusGenScalars['Date']; // Date!
  }
  Auth: {};
  BaseTransaction: { // root type
    accountId?: string | null; // ID
    amount: number; // Float!
    assetId: string; // ID!
    counterPartyAccountId?: string | null; // ID
    entryTime: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    settlementTime?: NexusGenScalars['Date'] | null; // Date
    tradeTime?: NexusGenScalars['Date'] | null; // Date
    txRef?: string | null; // String
  }
  BudgetStatement: { // root type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['BudgetStatementState']; // BudgetStatementState!
  }
  BudgetStatementAccount: { // root type
    address: string; // String!
    lineItems: NexusGenRootTypes['LineItem'][]; // [LineItem!]!
    name: string; // String!
  }
  BudgetStatementState: { // root type
    accounts: NexusGenRootTypes['BudgetStatementAccount'][]; // [BudgetStatementAccount!]!
    auditReports: NexusGenRootTypes['AuditReport'][]; // [AuditReport!]!
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    ftes?: NexusGenRootTypes['Ftes'] | null; // Ftes
    month?: string | null; // String
    owner?: NexusGenRootTypes['Owner'] | null; // Owner
    quoteCurrency?: string | null; // String
    vesting: NexusGenRootTypes['Vesting'][]; // [Vesting!]!
  }
  Cash: { // root type
    balance: number; // Float!
    currency: string; // String!
    id: string; // ID!
    spv?: NexusGenRootTypes['Spv'] | null; // Spv
    spvId?: string | null; // ID
  }
  Challenge: { // root type
    hex: string; // String!
    message: string; // String!
    nonce: string; // String!
  }
  Comment: { // root type
    author: NexusGenRootTypes['CommentAuthor']; // CommentAuthor!
    comment: string; // String!
    key: string; // String!
    status: NexusGenEnums['BudgetStatus']; // BudgetStatus!
    timestamp: NexusGenScalars['Date']; // Date!
  }
  CommentAuthor: { // root type
    id?: string | null; // String
    ref?: string | null; // String
    roleLabel?: string | null; // String
    username?: string | null; // String
  }
  CoreComponent: { // root type
    content?: string | null; // String
  }
  CoreUnit: { // root type
    code?: string | null; // String
    descriptionParagraph?: string | null; // String
    descriptionParagraphImageSource?: string | null; // String
    descriptionSentence?: string | null; // String
    id?: string | null; // String
    imageSource?: string | null; // String
    name?: string | null; // String
    shortCode?: string | null; // String
  }
  DefaultDocument: { // root type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
  }
  DefaultOperation: { // root type
    hash: string; // String!
    id?: string | null; // String
    index: number; // Int!
    timestamp: NexusGenScalars['Date']; // Date!
    type: string; // String!
  }
  DocumentDriveState: { // root type
    icon?: string | null; // String
    id: string; // ID!
    name: string; // String!
    nodes: Array<NexusGenRootTypes['Node'] | null>; // [Node]!
    slug?: string | null; // String
  }
  FixedIncome: { // root type
    CUSIP?: string | null; // String
    ISIN?: string | null; // String
    annualizedYield?: number | null; // Float
    coupon?: number | null; // Float
    fixedIncomeType?: NexusGenRootTypes['FixedIncomeType'] | null; // FixedIncomeType
    fixedIncomeTypeId?: string | null; // ID
    id?: string | null; // ID
    maturity?: NexusGenScalars['Date'] | null; // Date
    name?: string | null; // String
    notional?: number | null; // Float
    purchaseDate?: NexusGenScalars['Date'] | null; // Date
    purchasePrice?: number | null; // Float
    purchaseProceeds?: number | null; // Float
    realizedSurplus?: number | null; // Float
    salesProceeds?: number | null; // Float
    spv?: NexusGenRootTypes['Spv'] | null; // Spv
    spvId?: string | null; // ID
    totalDiscount?: number | null; // Float
  }
  FixedIncomeType: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Ftes: { // root type
    forecast: NexusGenRootTypes['FtesForecast'][]; // [FtesForecast!]!
    value: number; // Float!
  }
  FtesForecast: { // root type
    month: string; // String!
    value: number; // Float!
  }
  GroupTransaction: { // root type
    cashBalanceChange: number; // Float!
    cashTransaction?: NexusGenRootTypes['BaseTransaction'] | null; // BaseTransaction
    entryTime: NexusGenScalars['Date']; // Date!
    feeTransactions?: NexusGenRootTypes['BaseTransaction'][] | null; // [BaseTransaction!]
    fees?: NexusGenRootTypes['TransactionFee'][] | null; // [TransactionFee!]
    fixedIncomeTransaction?: NexusGenRootTypes['BaseTransaction'] | null; // BaseTransaction
    id: string; // ID!
    interestTransaction?: NexusGenRootTypes['BaseTransaction'] | null; // BaseTransaction
    type: NexusGenEnums['GroupTransactionType']; // GroupTransactionType!
  }
  LineItem: { // root type
    actual?: number | null; // Float
    budgetCap?: number | null; // Float
    category?: NexusGenRootTypes['LineItemCategory'] | null; // LineItemCategory
    comment?: string | null; // String
    forecast: NexusGenRootTypes['LineItemForecast'][]; // [LineItemForecast!]!
    group?: NexusGenRootTypes['LineItemGroup'] | null; // LineItemGroup
    headcountExpense: boolean; // Boolean!
    payment?: number | null; // Float
  }
  LineItemCategory: { // root type
    id: string; // String!
    ref: string; // String!
    title: string; // String!
  }
  LineItemForecast: { // root type
    budgetCap: number; // Float!
    month: string; // String!
    value: number; // Float!
  }
  LineItemGroup: { // root type
    color: string; // String!
    id: string; // String!
    ref: string; // String!
    title: string; // String!
  }
  Listener: { // root type
    block: boolean; // Boolean!
    callInfo?: NexusGenRootTypes['ListenerCallInfo'] | null; // ListenerCallInfo
    filter: NexusGenRootTypes['ListenerFilter']; // ListenerFilter!
    label?: string | null; // String
    listenerId: string; // ID!
    system: boolean; // Boolean!
  }
  ListenerCallInfo: { // root type
    data?: string | null; // String
    name?: string | null; // String
    transmitterType?: NexusGenEnums['TransmitterType'] | null; // TransmitterType
  }
  ListenerFilter: { // root type
    branch?: string[] | null; // [String!]
    documentId?: string[] | null; // [ID!]
    documentType: string[]; // [String!]!
    scope?: string[] | null; // [String!]
  }
  ListenerRevision: { // root type
    branch: string; // String!
    documentId?: string | null; // String
    driveId: string; // String!
    error?: string | null; // String
    revision: number; // Int!
    scope: string; // String!
    status: NexusGenEnums['UpdateStatus']; // UpdateStatus!
  }
  MoveElementInput: { // root type
    id: string; // ID!
    newParentId: string; // ID!
  }
  Mutation: {};
  Node: { // root type
    documentType?: string | null; // String
    id: string; // String!
    kind: string; // String!
    name: string; // String!
    parentFolder?: string | null; // String
  }
  OperationContext: { // root type
    signer?: NexusGenRootTypes['OperationSigner'] | null; // OperationSigner
  }
  OperationSigner: { // root type
    app: NexusGenRootTypes['OperationSignerApp']; // OperationSignerApp!
    signatures: string[][]; // [[String!]!]!
    user: NexusGenRootTypes['OperationSignerUser']; // OperationSignerUser!
  }
  OperationSignerApp: { // root type
    key: string; // String!
    name: string; // String!
  }
  OperationSignerUser: { // root type
    address: string; // String!
    chainId: number; // Int!
    networkId: string; // String!
  }
  OperationUpdate: { // root type
    context?: NexusGenRootTypes['OperationContext'] | null; // OperationContext
    hash: string; // String!
    id?: string | null; // String
    index: number; // Int!
    input: string; // String!
    skip: number; // Int!
    timestamp: string; // String!
    type: string; // String!
  }
  Owner: { // root type
    id?: string | null; // String
    ref?: string | null; // String
    title?: string | null; // String
  }
  Query: {};
  RealWorldAssets: { // root type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['RealWorldAssetsState']; // RealWorldAssetsState!
  }
  RealWorldAssetsPortfolio: { // root type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    fixedIncomeTypes: NexusGenRootTypes['FixedIncomeType'][]; // [FixedIncomeType!]!
    id: string; // ID!
    portfolio: NexusGenRootTypes['Asset'][]; // [Asset!]!
    principalLenderAccountId: string; // ID!
    serviceProviderFeeTypes: NexusGenRootTypes['ServiceProviderFeeType'][]; // [ServiceProviderFeeType!]!
    spvs: NexusGenRootTypes['Spv'][]; // [Spv!]!
    transactions: NexusGenRootTypes['GroupTransaction'][]; // [GroupTransaction!]!
  }
  RealWorldAssetsState: { // root type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    fixedIncomeTypes: NexusGenRootTypes['FixedIncomeType'][]; // [FixedIncomeType!]!
    portfolio: NexusGenRootTypes['Asset'][]; // [Asset!]!
    principalLenderAccountId: string; // ID!
    serviceProviderFeeTypes: NexusGenRootTypes['ServiceProviderFeeType'][]; // [ServiceProviderFeeType!]!
    spvs: NexusGenRootTypes['Spv'][]; // [Spv!]!
    transactions: NexusGenRootTypes['GroupTransaction'][]; // [GroupTransaction!]!
  }
  RemoveElementInput: { // root type
    id: string; // ID!
  }
  ReorderElementsInput: { // root type
    order: string[]; // [ID!]!
    parentElementId: string; // ID!
  }
  ScopeComponent: { // root type
    content?: string | null; // String
  }
  ScopeFramework: { // root type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['ScopeFrameworkState']; // ScopeFrameworkState!
  }
  ScopeFrameworkElement: { // root type
    components?: NexusGenRootTypes['ElementComponents'] | null; // ElementComponents
    id: string; // ID!
    name?: string | null; // String
    path: string; // String!
    type?: NexusGenEnums['ScopeFrameworkElementType'] | null; // ScopeFrameworkElementType
    version: number; // Int!
  }
  ScopeFrameworkState: { // root type
    elements: NexusGenRootTypes['ScopeFrameworkElement'][]; // [ScopeFrameworkElement!]!
    rootPath: string; // String!
  }
  SectionComponent: { // root type
    content?: string | null; // String
  }
  ServiceProviderFeeType: { // root type
    accountId: string; // ID!
    feeType: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Session: { // root type
    allowedOrigins?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    createdBy: string; // String!
    id: string; // String!
    isUserCreated: boolean; // Boolean!
    name?: string | null; // String
    referenceExpiryDate?: NexusGenScalars['Date'] | null; // Date
    referenceTokenId: string; // String!
    revokedAt?: NexusGenScalars['Date'] | null; // Date
  }
  SessionOutput: { // root type
    session: NexusGenRootTypes['Session']; // Session!
    token: string; // String!
  }
  SetRootPathInput: { // root type
    newRootPath: string; // String!
  }
  SnapshotAccount: { // root type
    accountAddress?: string | null; // String
    accountLabel?: string | null; // String
    accountType?: string | null; // String
    groupAccountId?: string | null; // ID
    id: string; // ID!
    offChain?: boolean | null; // Boolean
    snapshotAccountBalance?: Array<NexusGenRootTypes['SnapshotAccountBalance'] | null> | null; // [SnapshotAccountBalance]
    snapshotAccountTransaction?: Array<NexusGenRootTypes['SnapshotAccountTransaction'] | null> | null; // [SnapshotAccountTransaction]
    upstreamAccountId?: string | null; // ID
  }
  SnapshotAccountBalance: { // root type
    id?: string | null; // ID
    includesOffChain?: boolean | null; // Boolean
    inflow?: number | null; // Float
    initialBalance?: number | null; // Float
    newBalance?: number | null; // Float
    outflow?: number | null; // Float
    token?: string | null; // String
  }
  SnapshotAccountTransaction: { // root type
    amount?: number | null; // Float
    block?: number | null; // Int
    counterParty?: string | null; // String
    counterPartyName?: string | null; // String
    id: string; // ID!
    timestamp?: string | null; // String
    token?: string | null; // String
    txHash?: string | null; // String
    txLabel?: string | null; // String
  }
  Spv: { // root type
    id: string; // ID!
    name: string; // String!
  }
  StrandUpdate: { // root type
    branch: string; // String!
    documentId: string; // String!
    driveId: string; // String!
    operations: NexusGenRootTypes['OperationUpdate'][]; // [OperationUpdate!]!
    scope: string; // String!
  }
  SwitchboardDrive: {};
  SwitchboardHost: {};
  Sync: {};
  TransactionFee: { // root type
    amount: number; // Float!
    id: string; // ID!
    serviceProviderFeeTypeId: string; // ID!
  }
  TypeSpecificationComponent: { // root type
    additionalLogic?: string | null; // String
    category?: NexusGenEnums['TypeSpecificationComponentCategory'] | null; // TypeSpecificationComponentCategory
    documentIdentifierRules?: string | null; // String
    name?: string | null; // String
    overview?: string | null; // String
    typeAuthority?: string | null; // String
  }
  UpdateElementComponentsInput: { // root type
    components?: NexusGenRootTypes['ElementComponents'] | null; // ElementComponents
    id: string; // ID!
  }
  UpdateElementNameInput: { // root type
    id: string; // ID!
    name?: string | null; // String
  }
  UpdateElementTypeInput: { // root type
    id: string; // ID!
    type: NexusGenEnums['ScopeFrameworkElementType']; // ScopeFrameworkElementType!
  }
  User: { // root type
    address: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
  }
  Vesting: { // root type
    amount: string; // String!
    amountOld: string; // String!
    comment: string; // String!
    currency: string; // String!
    date: string; // String!
    key: string; // String!
    vested: boolean; // Boolean!
  }
}

export interface NexusGenInterfaces {
  IDocument: NexusGenRootTypes['AccountSnapshot'] | NexusGenRootTypes['BudgetStatement'] | NexusGenRootTypes['DefaultDocument'] | NexusGenRootTypes['RealWorldAssets'] | NexusGenRootTypes['ScopeFramework'];
  IOperation: NexusGenRootTypes['DefaultOperation'];
  IRealWorldAssetsState: NexusGenRootTypes['RealWorldAssetsPortfolio'] | NexusGenRootTypes['RealWorldAssetsState'];
  System: NexusGenRootTypes['SwitchboardDrive'] | NexusGenRootTypes['SwitchboardHost'];
}

export interface NexusGenUnions {
  Asset: NexusGenRootTypes['Cash'] | NexusGenRootTypes['FixedIncome'];
  ElementComponents: NexusGenRootTypes['ArticleComponent'] | NexusGenRootTypes['CoreComponent'] | NexusGenRootTypes['ScopeComponent'] | NexusGenRootTypes['SectionComponent'] | NexusGenRootTypes['TypeSpecificationComponent'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    id: string; // ID!
    label: string | null; // String
    reference: string; // String!
  }
  AccountSnapshot: { // field return type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['AccountSnapshotState']; // AccountSnapshotState!
  }
  AccountSnapshotState: { // field return type
    actualsComparison: Array<NexusGenRootTypes['ActualsComparison'] | null> | null; // [ActualsComparison]
    end: string | null; // String
    id: string; // ID!
    ownerId: string | null; // ID
    ownerType: string | null; // String
    period: string | null; // String
    snapshotAccount: Array<NexusGenRootTypes['SnapshotAccount'] | null> | null; // [SnapshotAccount]
    start: string | null; // String
  }
  ActualsComparison: { // field return type
    currency: string | null; // String
    month: string | null; // String
    netExpenses: NexusGenRootTypes['ActualsComparisonNetExpenses'] | null; // ActualsComparisonNetExpenses
    reportedActuals: number | null; // Float
  }
  ActualsComparisonNetExpenses: { // field return type
    offChainIncluded: NexusGenRootTypes['ActualsComparisonNetExpensesItem'] | null; // ActualsComparisonNetExpensesItem
    onChainOnly: NexusGenRootTypes['ActualsComparisonNetExpensesItem']; // ActualsComparisonNetExpensesItem!
  }
  ActualsComparisonNetExpensesItem: { // field return type
    amount: number | null; // Float
    difference: number | null; // Float
  }
  AddElementInput: { // field return type
    components: NexusGenRootTypes['ElementComponents'] | null; // ElementComponents
    id: string; // String!
    name: string | null; // String
    path: string; // String!
    type: NexusGenEnums['ScopeFrameworkElementType']; // ScopeFrameworkElementType!
  }
  ArticleComponent: { // field return type
    content: string | null; // String
  }
  AuditReport: { // field return type
    report: NexusGenScalars['Attachment']; // Attachment!
    status: NexusGenEnums['AuditReportStatus']; // AuditReportStatus!
    timestamp: NexusGenScalars['Date']; // Date!
  }
  Auth: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    sessions: Array<NexusGenRootTypes['Session'] | null> | null; // [Session]
  }
  BaseTransaction: { // field return type
    accountId: string | null; // ID
    amount: number; // Float!
    assetId: string; // ID!
    counterPartyAccountId: string | null; // ID
    entryTime: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    settlementTime: NexusGenScalars['Date'] | null; // Date
    tradeTime: NexusGenScalars['Date'] | null; // Date
    txRef: string | null; // String
  }
  BudgetStatement: { // field return type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['BudgetStatementState']; // BudgetStatementState!
  }
  BudgetStatementAccount: { // field return type
    address: string; // String!
    lineItems: NexusGenRootTypes['LineItem'][]; // [LineItem!]!
    name: string; // String!
  }
  BudgetStatementState: { // field return type
    accounts: NexusGenRootTypes['BudgetStatementAccount'][]; // [BudgetStatementAccount!]!
    auditReports: NexusGenRootTypes['AuditReport'][]; // [AuditReport!]!
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    ftes: NexusGenRootTypes['Ftes'] | null; // Ftes
    month: string | null; // String
    owner: NexusGenRootTypes['Owner'] | null; // Owner
    quoteCurrency: string | null; // String
    vesting: NexusGenRootTypes['Vesting'][]; // [Vesting!]!
  }
  Cash: { // field return type
    balance: number; // Float!
    currency: string; // String!
    id: string; // ID!
    spv: NexusGenRootTypes['Spv'] | null; // Spv
    spvId: string | null; // ID
  }
  Challenge: { // field return type
    hex: string; // String!
    message: string; // String!
    nonce: string; // String!
  }
  Comment: { // field return type
    author: NexusGenRootTypes['CommentAuthor']; // CommentAuthor!
    comment: string; // String!
    key: string; // String!
    status: NexusGenEnums['BudgetStatus']; // BudgetStatus!
    timestamp: NexusGenScalars['Date']; // Date!
  }
  CommentAuthor: { // field return type
    id: string | null; // String
    ref: string | null; // String
    roleLabel: string | null; // String
    username: string | null; // String
  }
  CoreComponent: { // field return type
    content: string | null; // String
  }
  CoreUnit: { // field return type
    code: string | null; // String
    descriptionParagraph: string | null; // String
    descriptionParagraphImageSource: string | null; // String
    descriptionSentence: string | null; // String
    id: string | null; // String
    imageSource: string | null; // String
    name: string | null; // String
    shortCode: string | null; // String
  }
  DefaultDocument: { // field return type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
  }
  DefaultOperation: { // field return type
    hash: string; // String!
    id: string | null; // String
    index: number; // Int!
    timestamp: NexusGenScalars['Date']; // Date!
    type: string; // String!
  }
  DocumentDriveState: { // field return type
    icon: string | null; // String
    id: string; // ID!
    name: string; // String!
    nodes: Array<NexusGenRootTypes['Node'] | null>; // [Node]!
    slug: string | null; // String
  }
  FixedIncome: { // field return type
    CUSIP: string | null; // String
    ISIN: string | null; // String
    annualizedYield: number | null; // Float
    coupon: number | null; // Float
    fixedIncomeType: NexusGenRootTypes['FixedIncomeType'] | null; // FixedIncomeType
    fixedIncomeTypeId: string | null; // ID
    id: string | null; // ID
    maturity: NexusGenScalars['Date'] | null; // Date
    name: string | null; // String
    notional: number | null; // Float
    purchaseDate: NexusGenScalars['Date'] | null; // Date
    purchasePrice: number | null; // Float
    purchaseProceeds: number | null; // Float
    realizedSurplus: number | null; // Float
    salesProceeds: number | null; // Float
    spv: NexusGenRootTypes['Spv'] | null; // Spv
    spvId: string | null; // ID
    totalDiscount: number | null; // Float
  }
  FixedIncomeType: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  Ftes: { // field return type
    forecast: NexusGenRootTypes['FtesForecast'][]; // [FtesForecast!]!
    value: number; // Float!
  }
  FtesForecast: { // field return type
    month: string; // String!
    value: number; // Float!
  }
  GroupTransaction: { // field return type
    cashBalanceChange: number; // Float!
    cashTransaction: NexusGenRootTypes['BaseTransaction'] | null; // BaseTransaction
    entryTime: NexusGenScalars['Date']; // Date!
    feeTransactions: NexusGenRootTypes['BaseTransaction'][] | null; // [BaseTransaction!]
    fees: NexusGenRootTypes['TransactionFee'][] | null; // [TransactionFee!]
    fixedIncomeTransaction: NexusGenRootTypes['BaseTransaction'] | null; // BaseTransaction
    id: string; // ID!
    interestTransaction: NexusGenRootTypes['BaseTransaction'] | null; // BaseTransaction
    type: NexusGenEnums['GroupTransactionType']; // GroupTransactionType!
  }
  LineItem: { // field return type
    actual: number | null; // Float
    budgetCap: number | null; // Float
    category: NexusGenRootTypes['LineItemCategory'] | null; // LineItemCategory
    comment: string | null; // String
    forecast: NexusGenRootTypes['LineItemForecast'][]; // [LineItemForecast!]!
    group: NexusGenRootTypes['LineItemGroup'] | null; // LineItemGroup
    headcountExpense: boolean; // Boolean!
    payment: number | null; // Float
  }
  LineItemCategory: { // field return type
    id: string; // String!
    ref: string; // String!
    title: string; // String!
  }
  LineItemForecast: { // field return type
    budgetCap: number; // Float!
    month: string; // String!
    value: number; // Float!
  }
  LineItemGroup: { // field return type
    color: string; // String!
    id: string; // String!
    ref: string; // String!
    title: string; // String!
  }
  Listener: { // field return type
    block: boolean; // Boolean!
    callInfo: NexusGenRootTypes['ListenerCallInfo'] | null; // ListenerCallInfo
    filter: NexusGenRootTypes['ListenerFilter']; // ListenerFilter!
    label: string | null; // String
    listenerId: string; // ID!
    system: boolean; // Boolean!
  }
  ListenerCallInfo: { // field return type
    data: string | null; // String
    name: string | null; // String
    transmitterType: NexusGenEnums['TransmitterType'] | null; // TransmitterType
  }
  ListenerFilter: { // field return type
    branch: string[] | null; // [String!]
    documentId: string[] | null; // [ID!]
    documentType: string[]; // [String!]!
    scope: string[] | null; // [String!]
  }
  ListenerRevision: { // field return type
    branch: string; // String!
    documentId: string | null; // String
    driveId: string; // String!
    error: string | null; // String
    revision: number; // Int!
    scope: string; // String!
    status: NexusGenEnums['UpdateStatus']; // UpdateStatus!
  }
  MoveElementInput: { // field return type
    id: string; // ID!
    newParentId: string; // ID!
  }
  Mutation: { // field return type
    acknowledge: boolean | null; // Boolean
    createChallenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    createSession: NexusGenRootTypes['SessionOutput'] | null; // SessionOutput
    deletePullResponderListener: NexusGenRootTypes['Listener'] | null; // Listener
    pushUpdates: Array<NexusGenRootTypes['ListenerRevision'] | null> | null; // [ListenerRevision]
    registerPullResponderListener: NexusGenRootTypes['Listener'] | null; // Listener
    revokeSession: NexusGenRootTypes['Session'] | null; // Session
    solveChallenge: NexusGenRootTypes['SessionOutput'] | null; // SessionOutput
  }
  Node: { // field return type
    documentType: string | null; // String
    id: string; // String!
    kind: string; // String!
    name: string; // String!
    parentFolder: string | null; // String
  }
  OperationContext: { // field return type
    signer: NexusGenRootTypes['OperationSigner'] | null; // OperationSigner
  }
  OperationSigner: { // field return type
    app: NexusGenRootTypes['OperationSignerApp']; // OperationSignerApp!
    signatures: string[][]; // [[String!]!]!
    user: NexusGenRootTypes['OperationSignerUser']; // OperationSignerUser!
  }
  OperationSignerApp: { // field return type
    key: string; // String!
    name: string; // String!
  }
  OperationSignerUser: { // field return type
    address: string; // String!
    chainId: number; // Int!
    networkId: string; // String!
  }
  OperationUpdate: { // field return type
    context: NexusGenRootTypes['OperationContext'] | null; // OperationContext
    hash: string; // String!
    id: string | null; // String
    index: number; // Int!
    input: string; // String!
    skip: number; // Int!
    timestamp: string; // String!
    type: string; // String!
  }
  Owner: { // field return type
    id: string | null; // String
    ref: string | null; // String
    title: string | null; // String
  }
  Query: { // field return type
    coreUnit: NexusGenRootTypes['CoreUnit'] | null; // CoreUnit
    coreUnits: Array<NexusGenRootTypes['CoreUnit'] | null> | null; // [CoreUnit]
    document: NexusGenRootTypes['IDocument'] | null; // IDocument
    documents: Array<NexusGenRootTypes['IDocument'] | null> | null; // [IDocument]
    drive: NexusGenRootTypes['DocumentDriveState'] | null; // DocumentDriveState
    rwaPortfolios: Array<NexusGenRootTypes['RealWorldAssetsPortfolio'] | null> | null; // [RealWorldAssetsPortfolio]
    system: NexusGenRootTypes['SwitchboardDrive'] | null; // SwitchboardDrive
  }
  RealWorldAssets: { // field return type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['RealWorldAssetsState']; // RealWorldAssetsState!
  }
  RealWorldAssetsPortfolio: { // field return type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    fixedIncomeTypes: NexusGenRootTypes['FixedIncomeType'][]; // [FixedIncomeType!]!
    id: string; // ID!
    portfolio: NexusGenRootTypes['Asset'][]; // [Asset!]!
    principalLenderAccountId: string; // ID!
    serviceProviderFeeTypes: NexusGenRootTypes['ServiceProviderFeeType'][]; // [ServiceProviderFeeType!]!
    spvs: NexusGenRootTypes['Spv'][]; // [Spv!]!
    transactions: NexusGenRootTypes['GroupTransaction'][]; // [GroupTransaction!]!
  }
  RealWorldAssetsState: { // field return type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    fixedIncomeTypes: NexusGenRootTypes['FixedIncomeType'][]; // [FixedIncomeType!]!
    portfolio: NexusGenRootTypes['Asset'][]; // [Asset!]!
    principalLenderAccountId: string; // ID!
    serviceProviderFeeTypes: NexusGenRootTypes['ServiceProviderFeeType'][]; // [ServiceProviderFeeType!]!
    spvs: NexusGenRootTypes['Spv'][]; // [Spv!]!
    transactions: NexusGenRootTypes['GroupTransaction'][]; // [GroupTransaction!]!
  }
  RemoveElementInput: { // field return type
    id: string; // ID!
  }
  ReorderElementsInput: { // field return type
    order: string[]; // [ID!]!
    parentElementId: string; // ID!
  }
  ScopeComponent: { // field return type
    content: string | null; // String
  }
  ScopeFramework: { // field return type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
    state: NexusGenRootTypes['ScopeFrameworkState']; // ScopeFrameworkState!
  }
  ScopeFrameworkElement: { // field return type
    components: NexusGenRootTypes['ElementComponents'] | null; // ElementComponents
    id: string; // ID!
    name: string | null; // String
    path: string; // String!
    type: NexusGenEnums['ScopeFrameworkElementType'] | null; // ScopeFrameworkElementType
    version: number; // Int!
  }
  ScopeFrameworkState: { // field return type
    elements: NexusGenRootTypes['ScopeFrameworkElement'][]; // [ScopeFrameworkElement!]!
    rootPath: string; // String!
  }
  SectionComponent: { // field return type
    content: string | null; // String
  }
  ServiceProviderFeeType: { // field return type
    accountId: string; // ID!
    feeType: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  Session: { // field return type
    allowedOrigins: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    createdBy: string; // String!
    id: string; // String!
    isUserCreated: boolean; // Boolean!
    name: string | null; // String
    referenceExpiryDate: NexusGenScalars['Date'] | null; // Date
    referenceTokenId: string; // String!
    revokedAt: NexusGenScalars['Date'] | null; // Date
  }
  SessionOutput: { // field return type
    session: NexusGenRootTypes['Session']; // Session!
    token: string; // String!
  }
  SetRootPathInput: { // field return type
    newRootPath: string; // String!
  }
  SnapshotAccount: { // field return type
    accountAddress: string | null; // String
    accountLabel: string | null; // String
    accountType: string | null; // String
    groupAccountId: string | null; // ID
    id: string; // ID!
    offChain: boolean | null; // Boolean
    snapshotAccountBalance: Array<NexusGenRootTypes['SnapshotAccountBalance'] | null> | null; // [SnapshotAccountBalance]
    snapshotAccountTransaction: Array<NexusGenRootTypes['SnapshotAccountTransaction'] | null> | null; // [SnapshotAccountTransaction]
    upstreamAccountId: string | null; // ID
  }
  SnapshotAccountBalance: { // field return type
    id: string | null; // ID
    includesOffChain: boolean | null; // Boolean
    inflow: number | null; // Float
    initialBalance: number | null; // Float
    newBalance: number | null; // Float
    outflow: number | null; // Float
    token: string | null; // String
  }
  SnapshotAccountTransaction: { // field return type
    amount: number | null; // Float
    block: number | null; // Int
    counterParty: string | null; // String
    counterPartyName: string | null; // String
    id: string; // ID!
    timestamp: string | null; // String
    token: string | null; // String
    txHash: string | null; // String
    txLabel: string | null; // String
  }
  Spv: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  StrandUpdate: { // field return type
    branch: string; // String!
    documentId: string; // String!
    driveId: string; // String!
    operations: NexusGenRootTypes['OperationUpdate'][]; // [OperationUpdate!]!
    scope: string; // String!
  }
  SwitchboardDrive: { // field return type
    auth: NexusGenRootTypes['Auth'] | null; // Auth
    sync: NexusGenRootTypes['Sync'] | null; // Sync
  }
  SwitchboardHost: { // field return type
    auth: NexusGenRootTypes['Auth'] | null; // Auth
  }
  Sync: { // field return type
    strands: Array<NexusGenRootTypes['StrandUpdate'] | null> | null; // [StrandUpdate]
  }
  TransactionFee: { // field return type
    amount: number; // Float!
    id: string; // ID!
    serviceProviderFeeTypeId: string; // ID!
  }
  TypeSpecificationComponent: { // field return type
    additionalLogic: string | null; // String
    category: NexusGenEnums['TypeSpecificationComponentCategory'] | null; // TypeSpecificationComponentCategory
    documentIdentifierRules: string | null; // String
    name: string | null; // String
    overview: string | null; // String
    typeAuthority: string | null; // String
  }
  UpdateElementComponentsInput: { // field return type
    components: NexusGenRootTypes['ElementComponents'] | null; // ElementComponents
    id: string; // ID!
  }
  UpdateElementNameInput: { // field return type
    id: string; // ID!
    name: string | null; // String
  }
  UpdateElementTypeInput: { // field return type
    id: string; // ID!
    type: NexusGenEnums['ScopeFrameworkElementType']; // ScopeFrameworkElementType!
  }
  User: { // field return type
    address: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
  }
  Vesting: { // field return type
    amount: string; // String!
    amountOld: string; // String!
    comment: string; // String!
    currency: string; // String!
    date: string; // String!
    key: string; // String!
    vested: boolean; // Boolean!
  }
  IDocument: { // field return type
    created: NexusGenScalars['Date']; // Date!
    documentType: string; // String!
    id: string; // String!
    lastModified: NexusGenScalars['Date']; // Date!
    name: string; // String!
    operations: NexusGenRootTypes['DefaultOperation'][]; // [DefaultOperation!]!
    revision: number; // Int!
  }
  IOperation: { // field return type
    hash: string; // String!
    id: string | null; // String
    index: number; // Int!
    timestamp: NexusGenScalars['Date']; // Date!
    type: string; // String!
  }
  IRealWorldAssetsState: { // field return type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    fixedIncomeTypes: NexusGenRootTypes['FixedIncomeType'][]; // [FixedIncomeType!]!
    portfolio: NexusGenRootTypes['Asset'][]; // [Asset!]!
    principalLenderAccountId: string; // ID!
    serviceProviderFeeTypes: NexusGenRootTypes['ServiceProviderFeeType'][]; // [ServiceProviderFeeType!]!
    spvs: NexusGenRootTypes['Spv'][]; // [Spv!]!
    transactions: NexusGenRootTypes['GroupTransaction'][]; // [GroupTransaction!]!
  }
  System: { // field return type
    auth: NexusGenRootTypes['Auth'] | null; // Auth
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    id: 'ID'
    label: 'String'
    reference: 'String'
  }
  AccountSnapshot: { // field return type name
    created: 'Date'
    documentType: 'String'
    id: 'String'
    lastModified: 'Date'
    name: 'String'
    operations: 'DefaultOperation'
    revision: 'Int'
    state: 'AccountSnapshotState'
  }
  AccountSnapshotState: { // field return type name
    actualsComparison: 'ActualsComparison'
    end: 'String'
    id: 'ID'
    ownerId: 'ID'
    ownerType: 'String'
    period: 'String'
    snapshotAccount: 'SnapshotAccount'
    start: 'String'
  }
  ActualsComparison: { // field return type name
    currency: 'String'
    month: 'String'
    netExpenses: 'ActualsComparisonNetExpenses'
    reportedActuals: 'Float'
  }
  ActualsComparisonNetExpenses: { // field return type name
    offChainIncluded: 'ActualsComparisonNetExpensesItem'
    onChainOnly: 'ActualsComparisonNetExpensesItem'
  }
  ActualsComparisonNetExpensesItem: { // field return type name
    amount: 'Float'
    difference: 'Float'
  }
  AddElementInput: { // field return type name
    components: 'ElementComponents'
    id: 'String'
    name: 'String'
    path: 'String'
    type: 'ScopeFrameworkElementType'
  }
  ArticleComponent: { // field return type name
    content: 'String'
  }
  AuditReport: { // field return type name
    report: 'Attachment'
    status: 'AuditReportStatus'
    timestamp: 'Date'
  }
  Auth: { // field return type name
    me: 'User'
    sessions: 'Session'
  }
  BaseTransaction: { // field return type name
    accountId: 'ID'
    amount: 'Float'
    assetId: 'ID'
    counterPartyAccountId: 'ID'
    entryTime: 'Date'
    id: 'ID'
    settlementTime: 'Date'
    tradeTime: 'Date'
    txRef: 'String'
  }
  BudgetStatement: { // field return type name
    created: 'Date'
    documentType: 'String'
    id: 'String'
    lastModified: 'Date'
    name: 'String'
    operations: 'DefaultOperation'
    revision: 'Int'
    state: 'BudgetStatementState'
  }
  BudgetStatementAccount: { // field return type name
    address: 'String'
    lineItems: 'LineItem'
    name: 'String'
  }
  BudgetStatementState: { // field return type name
    accounts: 'BudgetStatementAccount'
    auditReports: 'AuditReport'
    comments: 'Comment'
    ftes: 'Ftes'
    month: 'String'
    owner: 'Owner'
    quoteCurrency: 'String'
    vesting: 'Vesting'
  }
  Cash: { // field return type name
    balance: 'Float'
    currency: 'String'
    id: 'ID'
    spv: 'Spv'
    spvId: 'ID'
  }
  Challenge: { // field return type name
    hex: 'String'
    message: 'String'
    nonce: 'String'
  }
  Comment: { // field return type name
    author: 'CommentAuthor'
    comment: 'String'
    key: 'String'
    status: 'BudgetStatus'
    timestamp: 'Date'
  }
  CommentAuthor: { // field return type name
    id: 'String'
    ref: 'String'
    roleLabel: 'String'
    username: 'String'
  }
  CoreComponent: { // field return type name
    content: 'String'
  }
  CoreUnit: { // field return type name
    code: 'String'
    descriptionParagraph: 'String'
    descriptionParagraphImageSource: 'String'
    descriptionSentence: 'String'
    id: 'String'
    imageSource: 'String'
    name: 'String'
    shortCode: 'String'
  }
  DefaultDocument: { // field return type name
    created: 'Date'
    documentType: 'String'
    id: 'String'
    lastModified: 'Date'
    name: 'String'
    operations: 'DefaultOperation'
    revision: 'Int'
  }
  DefaultOperation: { // field return type name
    hash: 'String'
    id: 'String'
    index: 'Int'
    timestamp: 'Date'
    type: 'String'
  }
  DocumentDriveState: { // field return type name
    icon: 'String'
    id: 'ID'
    name: 'String'
    nodes: 'Node'
    slug: 'String'
  }
  FixedIncome: { // field return type name
    CUSIP: 'String'
    ISIN: 'String'
    annualizedYield: 'Float'
    coupon: 'Float'
    fixedIncomeType: 'FixedIncomeType'
    fixedIncomeTypeId: 'ID'
    id: 'ID'
    maturity: 'Date'
    name: 'String'
    notional: 'Float'
    purchaseDate: 'Date'
    purchasePrice: 'Float'
    purchaseProceeds: 'Float'
    realizedSurplus: 'Float'
    salesProceeds: 'Float'
    spv: 'Spv'
    spvId: 'ID'
    totalDiscount: 'Float'
  }
  FixedIncomeType: { // field return type name
    id: 'ID'
    name: 'String'
  }
  Ftes: { // field return type name
    forecast: 'FtesForecast'
    value: 'Float'
  }
  FtesForecast: { // field return type name
    month: 'String'
    value: 'Float'
  }
  GroupTransaction: { // field return type name
    cashBalanceChange: 'Float'
    cashTransaction: 'BaseTransaction'
    entryTime: 'Date'
    feeTransactions: 'BaseTransaction'
    fees: 'TransactionFee'
    fixedIncomeTransaction: 'BaseTransaction'
    id: 'ID'
    interestTransaction: 'BaseTransaction'
    type: 'GroupTransactionType'
  }
  LineItem: { // field return type name
    actual: 'Float'
    budgetCap: 'Float'
    category: 'LineItemCategory'
    comment: 'String'
    forecast: 'LineItemForecast'
    group: 'LineItemGroup'
    headcountExpense: 'Boolean'
    payment: 'Float'
  }
  LineItemCategory: { // field return type name
    id: 'String'
    ref: 'String'
    title: 'String'
  }
  LineItemForecast: { // field return type name
    budgetCap: 'Float'
    month: 'String'
    value: 'Float'
  }
  LineItemGroup: { // field return type name
    color: 'String'
    id: 'String'
    ref: 'String'
    title: 'String'
  }
  Listener: { // field return type name
    block: 'Boolean'
    callInfo: 'ListenerCallInfo'
    filter: 'ListenerFilter'
    label: 'String'
    listenerId: 'ID'
    system: 'Boolean'
  }
  ListenerCallInfo: { // field return type name
    data: 'String'
    name: 'String'
    transmitterType: 'TransmitterType'
  }
  ListenerFilter: { // field return type name
    branch: 'String'
    documentId: 'ID'
    documentType: 'String'
    scope: 'String'
  }
  ListenerRevision: { // field return type name
    branch: 'String'
    documentId: 'String'
    driveId: 'String'
    error: 'String'
    revision: 'Int'
    scope: 'String'
    status: 'UpdateStatus'
  }
  MoveElementInput: { // field return type name
    id: 'ID'
    newParentId: 'ID'
  }
  Mutation: { // field return type name
    acknowledge: 'Boolean'
    createChallenge: 'Challenge'
    createSession: 'SessionOutput'
    deletePullResponderListener: 'Listener'
    pushUpdates: 'ListenerRevision'
    registerPullResponderListener: 'Listener'
    revokeSession: 'Session'
    solveChallenge: 'SessionOutput'
  }
  Node: { // field return type name
    documentType: 'String'
    id: 'String'
    kind: 'String'
    name: 'String'
    parentFolder: 'String'
  }
  OperationContext: { // field return type name
    signer: 'OperationSigner'
  }
  OperationSigner: { // field return type name
    app: 'OperationSignerApp'
    signatures: 'String'
    user: 'OperationSignerUser'
  }
  OperationSignerApp: { // field return type name
    key: 'String'
    name: 'String'
  }
  OperationSignerUser: { // field return type name
    address: 'String'
    chainId: 'Int'
    networkId: 'String'
  }
  OperationUpdate: { // field return type name
    context: 'OperationContext'
    hash: 'String'
    id: 'String'
    index: 'Int'
    input: 'String'
    skip: 'Int'
    timestamp: 'String'
    type: 'String'
  }
  Owner: { // field return type name
    id: 'String'
    ref: 'String'
    title: 'String'
  }
  Query: { // field return type name
    coreUnit: 'CoreUnit'
    coreUnits: 'CoreUnit'
    document: 'IDocument'
    documents: 'IDocument'
    drive: 'DocumentDriveState'
    rwaPortfolios: 'RealWorldAssetsPortfolio'
    system: 'SwitchboardDrive'
  }
  RealWorldAssets: { // field return type name
    created: 'Date'
    documentType: 'String'
    id: 'String'
    lastModified: 'Date'
    name: 'String'
    operations: 'DefaultOperation'
    revision: 'Int'
    state: 'RealWorldAssetsState'
  }
  RealWorldAssetsPortfolio: { // field return type name
    accounts: 'Account'
    fixedIncomeTypes: 'FixedIncomeType'
    id: 'ID'
    portfolio: 'Asset'
    principalLenderAccountId: 'ID'
    serviceProviderFeeTypes: 'ServiceProviderFeeType'
    spvs: 'Spv'
    transactions: 'GroupTransaction'
  }
  RealWorldAssetsState: { // field return type name
    accounts: 'Account'
    fixedIncomeTypes: 'FixedIncomeType'
    portfolio: 'Asset'
    principalLenderAccountId: 'ID'
    serviceProviderFeeTypes: 'ServiceProviderFeeType'
    spvs: 'Spv'
    transactions: 'GroupTransaction'
  }
  RemoveElementInput: { // field return type name
    id: 'ID'
  }
  ReorderElementsInput: { // field return type name
    order: 'ID'
    parentElementId: 'ID'
  }
  ScopeComponent: { // field return type name
    content: 'String'
  }
  ScopeFramework: { // field return type name
    created: 'Date'
    documentType: 'String'
    id: 'String'
    lastModified: 'Date'
    name: 'String'
    operations: 'DefaultOperation'
    revision: 'Int'
    state: 'ScopeFrameworkState'
  }
  ScopeFrameworkElement: { // field return type name
    components: 'ElementComponents'
    id: 'ID'
    name: 'String'
    path: 'String'
    type: 'ScopeFrameworkElementType'
    version: 'Int'
  }
  ScopeFrameworkState: { // field return type name
    elements: 'ScopeFrameworkElement'
    rootPath: 'String'
  }
  SectionComponent: { // field return type name
    content: 'String'
  }
  ServiceProviderFeeType: { // field return type name
    accountId: 'ID'
    feeType: 'String'
    id: 'ID'
    name: 'String'
  }
  Session: { // field return type name
    allowedOrigins: 'String'
    createdAt: 'Date'
    createdBy: 'String'
    id: 'String'
    isUserCreated: 'Boolean'
    name: 'String'
    referenceExpiryDate: 'Date'
    referenceTokenId: 'String'
    revokedAt: 'Date'
  }
  SessionOutput: { // field return type name
    session: 'Session'
    token: 'String'
  }
  SetRootPathInput: { // field return type name
    newRootPath: 'String'
  }
  SnapshotAccount: { // field return type name
    accountAddress: 'String'
    accountLabel: 'String'
    accountType: 'String'
    groupAccountId: 'ID'
    id: 'ID'
    offChain: 'Boolean'
    snapshotAccountBalance: 'SnapshotAccountBalance'
    snapshotAccountTransaction: 'SnapshotAccountTransaction'
    upstreamAccountId: 'ID'
  }
  SnapshotAccountBalance: { // field return type name
    id: 'ID'
    includesOffChain: 'Boolean'
    inflow: 'Float'
    initialBalance: 'Float'
    newBalance: 'Float'
    outflow: 'Float'
    token: 'String'
  }
  SnapshotAccountTransaction: { // field return type name
    amount: 'Float'
    block: 'Int'
    counterParty: 'String'
    counterPartyName: 'String'
    id: 'ID'
    timestamp: 'String'
    token: 'String'
    txHash: 'String'
    txLabel: 'String'
  }
  Spv: { // field return type name
    id: 'ID'
    name: 'String'
  }
  StrandUpdate: { // field return type name
    branch: 'String'
    documentId: 'String'
    driveId: 'String'
    operations: 'OperationUpdate'
    scope: 'String'
  }
  SwitchboardDrive: { // field return type name
    auth: 'Auth'
    sync: 'Sync'
  }
  SwitchboardHost: { // field return type name
    auth: 'Auth'
  }
  Sync: { // field return type name
    strands: 'StrandUpdate'
  }
  TransactionFee: { // field return type name
    amount: 'Float'
    id: 'ID'
    serviceProviderFeeTypeId: 'ID'
  }
  TypeSpecificationComponent: { // field return type name
    additionalLogic: 'String'
    category: 'TypeSpecificationComponentCategory'
    documentIdentifierRules: 'String'
    name: 'String'
    overview: 'String'
    typeAuthority: 'String'
  }
  UpdateElementComponentsInput: { // field return type name
    components: 'ElementComponents'
    id: 'ID'
  }
  UpdateElementNameInput: { // field return type name
    id: 'ID'
    name: 'String'
  }
  UpdateElementTypeInput: { // field return type name
    id: 'ID'
    type: 'ScopeFrameworkElementType'
  }
  User: { // field return type name
    address: 'String'
    createdAt: 'Date'
  }
  Vesting: { // field return type name
    amount: 'String'
    amountOld: 'String'
    comment: 'String'
    currency: 'String'
    date: 'String'
    key: 'String'
    vested: 'Boolean'
  }
  IDocument: { // field return type name
    created: 'Date'
    documentType: 'String'
    id: 'String'
    lastModified: 'Date'
    name: 'String'
    operations: 'DefaultOperation'
    revision: 'Int'
  }
  IOperation: { // field return type name
    hash: 'String'
    id: 'String'
    index: 'Int'
    timestamp: 'Date'
    type: 'String'
  }
  IRealWorldAssetsState: { // field return type name
    accounts: 'Account'
    fixedIncomeTypes: 'FixedIncomeType'
    portfolio: 'Asset'
    principalLenderAccountId: 'ID'
    serviceProviderFeeTypes: 'ServiceProviderFeeType'
    spvs: 'Spv'
    transactions: 'GroupTransaction'
  }
  System: { // field return type name
    auth: 'Auth'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    acknowledge: { // args
      listenerId: string; // String!
      revisions?: Array<NexusGenInputs['ListenerRevisionInput'] | null> | null; // [ListenerRevisionInput]
    }
    createChallenge: { // args
      address: string; // String!
    }
    createSession: { // args
      session: NexusGenInputs['SessionInput']; // SessionInput!
    }
    deletePullResponderListener: { // args
      filter: NexusGenInputs['InputListenerFilter']; // InputListenerFilter!
    }
    pushUpdates: { // args
      strands?: NexusGenInputs['InputStrandUpdate'][] | null; // [InputStrandUpdate!]
    }
    registerPullResponderListener: { // args
      filter: NexusGenInputs['InputListenerFilter']; // InputListenerFilter!
    }
    revokeSession: { // args
      sessionId: string; // String!
    }
    solveChallenge: { // args
      nonce: string; // String!
      signature: string; // String!
    }
  }
  Query: {
    coreUnit: { // args
      id?: string | null; // String
    }
    document: { // args
      id: string; // String!
    }
    rwaPortfolios: { // args
      id?: string | null; // String
    }
  }
  Sync: {
    strands: { // args
      listenerId?: string | null; // ID
      since?: NexusGenScalars['Date'] | null; // Date
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Asset: "Cash" | "FixedIncome"
  ElementComponents: "ArticleComponent" | "CoreComponent" | "ScopeComponent" | "SectionComponent" | "TypeSpecificationComponent"
  IDocument: "AccountSnapshot" | "BudgetStatement" | "DefaultDocument" | "RealWorldAssets" | "ScopeFramework"
  IOperation: "DefaultOperation"
  IRealWorldAssetsState: "RealWorldAssetsPortfolio" | "RealWorldAssetsState"
  System: "SwitchboardDrive" | "SwitchboardHost"
}

export interface NexusGenTypeInterfaces {
  AccountSnapshot: "IDocument"
  BudgetStatement: "IDocument"
  DefaultDocument: "IDocument"
  DefaultOperation: "IOperation"
  RealWorldAssets: "IDocument"
  RealWorldAssetsPortfolio: "IRealWorldAssetsState"
  RealWorldAssetsState: "IRealWorldAssetsState"
  ScopeFramework: "IDocument"
  SwitchboardDrive: "System"
  SwitchboardHost: "System"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Asset" | "ElementComponents" | "IDocument" | "IOperation" | "IRealWorldAssetsState" | "System";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    
    /**
     * Async validation function. Reject when validation fails. Resolve otherwise.
     */
    validate?: 
        NexusGenArgTypes extends HasTypeField<TypeName, FieldName>
        ? ArgsValidationConfig<NexusGenArgTypes[TypeName][FieldName]>
        : never
        
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}