{
  "version": 3,
  "sources": ["../../../../operations/users/subscribe.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["import { createOperation, z } from '../../generated/wundergraph.factory';\n\nexport default createOperation.subscription({\n\tinput: z.object({\n\t\tid: z.string(),\n\t}),\n\thandler: async function* ({ input }) {\n\t\ttry {\n\t\t\t// setup your subscription here, e.g. connect to a queue / stream\n\t\t\tfor (let i = 0; i < 10; i++) {\n\t\t\t\tyield {\n\t\t\t\t\tid: input.id,\n\t\t\t\t\tname: 'Jens',\n\t\t\t\t\tbio: 'Founder of WunderGraph',\n\t\t\t\t\ttime: new Date().toISOString(),\n\t\t\t\t};\n\t\t\t\t// let's fake some delay\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1000));\n\t\t\t}\n\t\t} finally {\n\t\t\t// finally gets called, when the client disconnects\n\t\t\t// you can use it to clean up the queue / stream connection\n\t\t\tconsole.log('client disconnected');\n\t\t}\n\t},\n});\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalClient } from \"./wundergraph.internal.client\";\nimport type { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { ORM } from './orm'\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\n\nimport type server from '../wundergraph.server';\n\ntype ContextField = Required<Required<Required<typeof server>['context']>['request']>['create'];\nexport type ContextType = ContextField extends (...args: any) => any ? Awaited<ReturnType<ContextField>> : never;\n\n\n\nimport type { Queries, Mutations } from \"./jsonschema\";\nimport type { IOpenaiAgentFactory } from \"@wundergraph/sdk/openai\"\nexport type QueriesAndMutations = Queries & Mutations;\nexport type OpenApiAgentFactory = IOpenaiAgentFactory<QueriesAndMutations>;\n\nexport { z, AuthorizationError } from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<InternalClient, Role, CustomClaims, InternalOperationsClient, ORM, OpenApiAgentFactory, ContextType>();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,wBAAuC;AAevC,IAAAA,qBAAsC;AAC/B,IAAM,sBAAkB,0CAA4H;;;ADrB3J,IAAO,oBAAQ,gBAAgB,aAAa;AAAA,EAC3C,OAAO,qBAAE,OAAO;AAAA,IACf,IAAI,qBAAE,OAAO;AAAA,EACd,CAAC;AAAA,EACD,SAAS,iBAAiB,EAAE,MAAM,GAAG;AACpC,QAAI;AAEH,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC5B,cAAM;AAAA,UACL,IAAI,MAAM;AAAA,UACV,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM,IAAI,KAAK,EAAE,YAAY;AAAA,QAC9B;AAEA,cAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAAA,MACzD;AAAA,IACD,UAAE;AAGD,cAAQ,IAAI,qBAAqB;AAAA,IAClC;AAAA,EACD;AACD,CAAC;",
  "names": ["import_operations"]
}
