# Code generated by "wunderctl"; DO NOT EDIT.

schema {
  query: Query
  mutation: Mutation
}

"""
The @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.

A potential use-case could be that you have a graphql upstream which is not accepting null values for variables.
By enabling this directive all variables with null values will be removed from upstream query.

query ($say: String, $name: String) @removeNullVariables {
	hello(say: $say, name: $name)
}

Directive will transform variables json and remove top level null values.
{ "say": null, "name": "world" }

So upstream will receive the following variables:

{ "name": "world" }
"""
directive @removeNullVariables on QUERY | MUTATION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
  """Optional field to apply the JSON schema to"""
  on: String
) repeatable on VARIABLE_DEFINITION

directive @rbac(
  "the user must match all roles"
  requireMatchAll: [WG_ROLE]
  "the user must match at least one of the roles"
  requireMatchAny: [WG_ROLE]
  "the user must not match all of the roles"
  denyMatchAll: [WG_ROLE]
  "the user must not match any of the roles"
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The @fromClaim directive sets the variable to the value retrieved from the given a claim.
Adding this directive makes the operation require authentication.
"""
directive @fromClaim(name: WG_CLAIM, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """
  customFormat must conform to the Golang specification for specifying a date time format
  """
  customFormat: String
  on: String = ""
) repeatable on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID(on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.
"""
directive @injectEnvironmentVariable(name: String!, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

"""
The @requireAuthentication Directive marks an Operation to require authentication.
Without authentication, the operation will return an Unauthorized error with status code 401.
"""
directive @requireAuthentication on QUERY | MUTATION | SUBSCRIPTION

type asdf_Challenge {
  hex: String!
  message: String!
  nonce: String!
  _join: Query!
}

type asdf_CoreUnit {
  code: String
  descriptionParagraph: String
  descriptionParagraphImageSource: String
  descriptionSentence: String
  id: String
  imageSource: String
  name: String
  shortCode: String
  _join: Query!
}

"""Date custom scalar type"""
scalar asdf_GQLDateBase

type Mutation {
  asdf_createChallenge(address: String!): asdf_Challenge
  asdf_createSession(session: asdf_SessionInput!): asdf_SessionOutput
  asdf_revokeSession(sessionId: String!): asdf_Session
  asdf_solveChallenge(nonce: String!, signature: String!): asdf_SessionOutput
  ecosystem_addBudgetCap(input: ecosystem_AddBudgetCapInput): [ecosystem_BudgetCap]
  ecosystem_budgetLineItemUpdate(input: ecosystem_LineItemUpdateInput): [ecosystem_BudgetStatementLineItem]
  ecosystem_budgetLineItemsBatchAdd(input: [ecosystem_LineItemsBatchAddInput]): [ecosystem_BudgetStatementLineItem]
  ecosystem_budgetLineItemsBatchDelete(input: [ecosystem_LineItemsBatchDeleteInput]): [ecosystem_BudgetStatementLineItem]
  ecosystem_budgetLineItemsBatchUpdate(input: [ecosystem_LineItemsBatchUpdateInput]): [ecosystem_BudgetStatementLineItem]
  ecosystem_budgetStatementCommentCreate(input: ecosystem_BudgetStatementCommentInput): [ecosystem_BudgetStatementComment]
  ecosystem_budgetStatementCommentDelete(input: ecosystem_BudgetStatementCommentDeleteInput): [ecosystem_BudgetStatementComment]
  ecosystem_budgetStatementFTEAdd(input: ecosystem_BudgetStatementFTEInput): [ecosystem_BudgetStatementFTEs]
  ecosystem_budgetStatementFTEUpdate(input: ecosystem_BudgetStatementFTEUpdateInput): [ecosystem_BudgetStatementFTEs]
  ecosystem_budgetStatementStatusUpdate(input: ecosystem_BudgetStatementStatusInput): ecosystem_BudgetStatement
  ecosystem_budgetStatementWalletBatchAdd(input: [ecosystem_BudgetStatementWalletBatchAddInput]): [ecosystem_BudgetStatementWallet]
  ecosystem_budgetStatementsBatchAdd(input: [ecosystem_BudgetStatementBatchAddInput]): [ecosystem_BudgetStatement]
  ecosystem_createBudget(input: ecosystem_CreateBudgetInput): [ecosystem_Budget]
  ecosystem_deleteExpenseCategory(id: ID!): ecosystem_ExpenseCategory
  ecosystem_updateBudget(input: ecosystem_UpdateBudgetInput): ecosystem_Budget
  ecosystem_updateBudgetCap(input: ecosystem_UpdateBudgetCapInput): [ecosystem_BudgetCap]
  ecosystem_userActivityUpdate(input: ecosystem_UserActivityUpdateInput): [ecosystem_UserActivityUpdatePayload]
  "Used to change the password of the currently logged in user"
  ecosystem_userChangePassword(input: ecosystem_UpdatePassword!): ecosystem_User
  "Used to create new users - requires authentication"
  ecosystem_userCreate(input: ecosystem_UserInput): ecosystem_User
  "Used to delete the account of the currently logged in user"
  ecosystem_userDelete(filter: ecosystem_UserDelete): ecosystem_User
  "Used to login to the API"
  ecosystem_userLogin(input: ecosystem_AuthInput!): ecosystem_UserPayload!
  ecosystem_userSetActiveFlag(input: ecosystem_UserSetActiveFlag): ecosystem_User
}

type Query {
  asdf_coreUnit(id: String): asdf_CoreUnit
  asdf_coreUnits: [asdf_CoreUnit]
  asdf_me: asdf_User
  asdf_sessions: [asdf_Session]
  ecosystem_activityFeed(filter: ecosystem_ActivityFeedFilter, limit: Int, offset: Int): [ecosystem_ChangeTrackingEvent]
  ecosystem_budgetStatementComments(filter: ecosystem_BudgetStatementCommentFilter): [ecosystem_BudgetStatementComment]
  ecosystem_budgetStatementEvents(filter: ecosystem_BudgetStatementEventsFilter): [ecosystem_ChangeTrackingEvent]
  ecosystem_budgetStatementLineItems(filter: ecosystem_BudgetStatementLineItemFilter, limit: Int, offset: Int): [ecosystem_BudgetStatementLineItem]
  ecosystem_budgetStatementWallets(filter: ecosystem_BudgetStatementWalletFilter): [ecosystem_BudgetStatementWallet]
  ecosystem_budgetStatements(filter: ecosystem_BudgetStatementFilter, limit: Int, offset: Int): [ecosystem_BudgetStatement!]
  ecosystem_budgetToolVersions: [ecosystem_BudgetToolVersion]
  ecosystem_budgets(filter: ecosystem_BudgetFilter, limit: Int, offset: Int): [ecosystem_Budget]
  ecosystem_contributorCommitments(filter: ecosystem_ContributorCommitmentFilter): [ecosystem_ContributorCommitment]
  ecosystem_contributors(filter: ecosystem_ContributorFilter, limit: Int, offset: Int): [ecosystem_Contributor]
  "Use this query to retrieve information about ALL Core Units or one Core Unit by using filter arguments."
  ecosystem_coreUnits(filter: ecosystem_CoreUnitFilter, limit: Int, offset: Int): [ecosystem_CoreUnit]
  ecosystem_cuGithubContributions(filter: ecosystem_CuGithubContributionFilter): [ecosystem_CuGithubContribution]
  "Used to retrieve all Core Unit Mips in the database or a specific one using a filter"
  ecosystem_cuMips(filter: ecosystem_CuMipFilter): [ecosystem_CuMip]
  ecosystem_cuUpdates(filter: ecosystem_CuUpdateFilter): [ecosystem_CuUpdate]
  ecosystem_expenseCategories: [ecosystem_ExpenseCategory]
  ecosystem_githubOrgs(filter: ecosystem_GithubOrgFilter): [ecosystem_GithubOrg]
  ecosystem_githubRepos(filter: ecosystem_GithubRepoFilter): [ecosystem_GithubRepo]
  ecosystem_latestBudgetToolVersion: [ecosystem_BudgetToolVersion]
  ecosystem_makerGithubEcosystemAll(filter: ecosystem_MakerGithubEcosystemFilter): [ecosystem_MakerGithubEcosystem]
  ecosystem_mip39s(filter: ecosystem_Mip39Filter): [ecosystem_Mip39]
  ecosystem_mip40BudgetLineItems(filter: ecosystem_Mip40BudgetLineItemFilter): [ecosystem_Mip40BudgetLineItem]
  ecosystem_mip40BudgetPeriods(filter: ecosystem_Mip40BudgetPeriodFilter): [ecosystem_Mip40BudgetPeriod]
  ecosystem_mip40Wallets(filter: ecosystem_Mip40WalletFilter): [ecosystem_Mip40Wallet]
  ecosystem_mip40s(filter: ecosystem_Mip40Filter): [ecosystem_Mip40]
  ecosystem_mip41s(filter: ecosystem_Mip41Filter): [ecosystem_Mip41]
  ecosystem_mipReplaces(filter: ecosystem_MipReplaceFilter): [ecosystem_MipReplaces]
  ecosystem_recognizedDelegates: [ecosystem_RecognizedDelegate]
  ecosystem_snapshots(filter: ecosystem_SnapshotFilter): [ecosystem_Snapshot]
  ecosystem_socialMediaChannels(filter: ecosystem_SocialMediaChannelsFilter): [ecosystem_SocialMediaChannels]
  "Use this query to retrieve information about ALL Teams or one Team by using filter arguments."
  ecosystem_teams(filter: ecosystem_TeamFilter, limit: Int, offset: Int): [ecosystem_Team]
  ecosystem_totalQuarterlyExpenses(filter: ecosystem_AggregateExpensesFilter): ecosystem_TotalQuarterlyExpenses
  ecosystem_updates(filter: ecosystem_UpdateFilter): [ecosystem_TeamUpdate]
  ecosystem_userActivity(filter: ecosystem_UserActivityFilter): [ecosystem_UserActivity]
  ecosystem_users(input: ecosystem_UsersFilter): [ecosystem_User]
}

type asdf_Session {
  allowedOrigins: String
  createdAt: asdf_GQLDateBase!
  createdBy: String!
  id: String!
  isUserCreated: Boolean!
  name: String
  referenceExpiryDate: asdf_GQLDateBase
  referenceTokenId: String!
  revokedAt: asdf_GQLDateBase
  _join: Query!
}

input asdf_SessionInput {
  allowedOrigins: String!
  expiryDurationSeconds: Int
  name: String!
}

type asdf_SessionOutput {
  session: asdf_Session!
  token: String!
  _join: Query!
}

type asdf_User {
  address: String!
  createdAt: asdf_GQLDateBase!
  _join: Query!
}

"""
Banking account number is a string of 5 to 17 alphanumeric values for representing an generic account number
"""
scalar ecosystem_AccountNumber

input ecosystem_ActivityFeedFilter {
  objectId: ID!
  objectType: String!
}

type ecosystem_ActualsComparison {
  currency: String
  month: String
  netExpenses: ecosystem_ActualsComparisonNetExpenses
  reportedActuals: Float
  _join: Query!
}

type ecosystem_ActualsComparisonNetExpenses {
  offChainIncluded: ecosystem_ActualsComparisonNetExpensesItem
  onChainOnly: ecosystem_ActualsComparisonNetExpensesItem!
  _join: Query!
}

type ecosystem_ActualsComparisonNetExpensesItem {
  amount: Float
  difference: Float
  _join: Query!
}

input ecosystem_AddBudgetCapInput {
  amount: Float!
  budgetId: ID!
  currency: String!
  expenseCategoryId: ID
}

input ecosystem_AggregateExpensesFilter {
  budgets: String
  categories: String
  end: String
  granularity: ecosystem_Granularity
  start: String
}

type ecosystem_AuditReport {
  auditStatus: ecosystem_AuditStatus
  budgetStatementId: ID!
  id: ID!
  reportUrl: String
  timestamp: ecosystem_Timestamp
  _join: Query!
}

enum ecosystem_AuditStatus {
  Approved
  ApprovedWithComments
  Escalated
  NeedActionsBeforeApproval
}

input ecosystem_AuthInput {
  password: String!
  username: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type ecosystem_Budget {
  budgetCap: [ecosystem_BudgetCap]
  code: String
  codePath: String
  end: DateTime
  id: ID
  idPath: String
  name: String
  parentId: ID
  start: DateTime
  _join: Query!
}

type ecosystem_BudgetCap {
  amount: Float
  currency: String
  expenseCategory: [ecosystem_ExpenseCategory]
  id: ID!
  _join: Query!
}

input ecosystem_BudgetFilter {
  code: String
  end: DateTime
  id: ID
  maxDepth: Int
  parentId: ID
  path: Int
  start: DateTime
}

enum ecosystem_BudgetOwner {
  AlignedDelegates
  CoreUnit
  Delegates
  EcosystemActor
  Project
  SpecialPurposeFund
}

type ecosystem_BudgetStatement {
  activityFeed: [ecosystem_ChangeTrackingEvent]
  auditReport: [ecosystem_AuditReport]
  "Number of full-time employees in the corresponding budget statement"
  budgetStatementFTEs: [ecosystem_BudgetStatementFTEs]
  "Details on the amount of MKR vested in the corresponding budget statement"
  budgetStatementMKRVest: [ecosystem_BudgetStatementMKRVest]
  "Details on the wallets used for budget statement wallets"
  budgetStatementWallet: [ecosystem_BudgetStatementWallet]
  comments: [ecosystem_BudgetStatementComment]
  "Auto generated id field"
  id: ID!
  mkrProgramLength: Float
  "Month of corresponding budget statement"
  month: String!
  "Core Unit code as defined with the Core Units' MIP39"
  ownerCode: String
  "Auto generated id field from Core Unit table"
  ownerId: ID
  ownerType: String
  "Link to the complete publication of the budget statement"
  publicationUrl: String @deprecated(reason: "Moving this field to CoreUnit.legacyBudgetStamentUrl")
  "Status of the budgest statement (Draft/Final)"
  status: ecosystem_BudgetStatus
  _join: Query!
}

input ecosystem_BudgetStatementBatchAddInput {
  month: String
  ownerCode: String
  ownerId: ID
  ownerType: String
  status: ecosystem_BudgetStatus
}

type ecosystem_BudgetStatementComment {
  author: ecosystem_User
  budgetStatementId: ID!
  comment: String
  id: ID!
  status: ecosystem_BudgetStatus
  timestamp: DateTime
  _join: Query!
}

type ecosystem_BudgetStatementCommentAuthor {
  id: ID!
  name: String
  _join: Query!
}

input ecosystem_BudgetStatementCommentAuthorFilter {
  id: ID
  name: String
}

input ecosystem_BudgetStatementCommentDeleteInput {
  id: ID
}

input ecosystem_BudgetStatementCommentFilter {
  budgetStatementId: ID
  id: ID
  timestamp: DateTime
}

input ecosystem_BudgetStatementCommentInput {
  budgetStatementId: ID!
  comment: String
  commentAuthorId: ID!
  status: ecosystem_BudgetStatus
}

input ecosystem_BudgetStatementEventsFilter {
  budgetStatementId: ID
}

input ecosystem_BudgetStatementFTEInput {
  budgetStatementId: ID!
  coreUnitId: Float
  ftes: Float!
  month: String!
}

input ecosystem_BudgetStatementFTEUpdateInput {
  budgetStatementId: ID!
  coreUnitId: Float
  ftes: Float!
  id: ID!
  month: String!
}

type ecosystem_BudgetStatementFTEs {
  budgetStatementId: ID
  "Full-time employees"
  ftes: Float
  id: ID!
  month: String
  _join: Query!
}

input ecosystem_BudgetStatementFilter {
  id: ID
  mkrProgramLength: Float
  month: String
  ownerCode: String
  ownerId: ID
  ownerType: ecosystem_BudgetOwner!
  status: ecosystem_BudgetStatus
}

input ecosystem_BudgetStatementInput {
  month: String
  ownerCode: String
  ownerId: ID
  status: ecosystem_BudgetStatus
}

type ecosystem_BudgetStatementLineItem {
  actual: Float
  budgetCap: Float
  budgetCategory: String
  budgetId: ID
  budgetStatementWalletId: ID!
  canonicalBudgetCategory: ecosystem_CanonicalBudgetCategory
  comments: String
  currency: String
  forecast: Float
  group: String
  headcountExpense: Boolean
  id: ID!
  month: String
  payment: Float
  position: Int
  _join: Query!
}

input ecosystem_BudgetStatementLineItemFilter {
  actual: Float
  budgetCap: Float
  budgetCategory: String
  budgetStatementWalletId: ID
  canonicalBudgetCategory: ecosystem_CanonicalBudgetCategory
  comments: String
  forecast: Float
  group: String
  id: ID
  month: String
  position: Int
}

type ecosystem_BudgetStatementMKRVest {
  budgetStatementId: ID!
  comments: String
  id: ID!
  "Current MKR amount"
  mkrAmount: Float
  "Previous MKR amount"
  mkrAmountOld: Float
  vestingDate: String!
  _join: Query!
}

type ecosystem_BudgetStatementPayload {
  budgetStatement: [ecosystem_BudgetStatement]
  errors: [ecosystem_Error]
  _join: Query!
}

type ecosystem_BudgetStatementPayment {
  budgetStatementLineItemId: Int
  budgetStatementWalletId: ID!
  comments: String
  id: ID!
  transactionDate: String!
  transactionId: String
  _join: Query!
}

input ecosystem_BudgetStatementPaymentFilter {
  budgetStatementLineItemId: Int
  budgetStatementWalletId: ID
  comments: String
  id: ID
  transactionDate: String
  transactionId: String
}

input ecosystem_BudgetStatementStatusInput {
  id: ID!
  status: ecosystem_BudgetStatus!
}

type ecosystem_BudgetStatementTransferRequest {
  budgetStatementPaymentId: ID
  budgetStatementWalletId: ID!
  id: ID!
  requestAmount: Float
  target: ecosystem_Target
  walletBalance: Float
  walletBalanceTimeStamp: DateTime
  _join: Query!
}

type ecosystem_BudgetStatementWallet {
  "Wallet address"
  address: String
  budgetStatementId: ID!
  "Retrieve breakdown of the line items that make up the corresponding budget statement"
  budgetStatementLineItem(limit: Int, offset: Int): [ecosystem_BudgetStatementLineItem]
  "Retrieve payment information for corresponding budget statement"
  budgetStatementPayment: [ecosystem_BudgetStatementPayment]
  budgetStatementTransferRequest: [ecosystem_BudgetStatementTransferRequest]
  comments: String
  "Current wallet balance (as defined within the budget statement"
  currentBalance: Float
  id: ID!
  "Wallet name"
  name: String
  topupTransfer: Float
  _join: Query!
}

input ecosystem_BudgetStatementWalletBatchAddInput {
  address: String
  budgetStatementId: ID
  comments: String
  cuId: ID
  currentBalance: Float
  name: String
  topupTransfer: Float
}

input ecosystem_BudgetStatementWalletFilter {
  address: String
  budgetStatementId: ID
  comments: String
  currentBalance: Float
  id: ID
  name: String
  topupTransfer: Float
}

enum ecosystem_BudgetStatus {
  Draft
  Escalated
  Final
  Review
}

type ecosystem_BudgetToolVersion {
  id: ID!
  link: String!
  version: String!
  _join: Query!
}

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar ecosystem_Byte

"""
Enum holding the values of the Canonical Budget Category - As defined in the Strategic Finance Chart of Accounts
"""
enum ecosystem_CanonicalBudgetCategory {
  AdminExpense
  Bonus
  CommunityDevelopmentExpense
  CompensationAndBenefits
  ContingencyBuffer
  FreightAndDuties
  GasExpense
  GovernancePrograms
  HardwareExpense
  MarketingExpense
  ProfessionalServices
  SoftwareDevelopmentExpense
  SoftwareExpense
  Supplies
  TrainingExpense
  TravelAndEntertainment
}

type ecosystem_ChangeTrackingEvent {
  "Timestamp of the event"
  created_at: DateTime!
  "Written description of the event"
  description: String!
  "Type of event"
  event: String!
  "Automatically generated ID"
  id: ID!
  "JSON object containing more context on the event"
  params: JSON!
  _join: Query!
}

enum ecosystem_Commitment {
  FullTime
  Inactive
  PartTime
  Variable
}

type ecosystem_Contributor {
  discordHandle: String
  email: String
  facilitatorImage: String
  forumHandle: String
  githubUrl: String
  id: ID!
  name: String!
  twitterHandle: String
  _join: Query!
}

type ecosystem_ContributorCommitment {
  commitment: ecosystem_Commitment
  contributor: [ecosystem_Contributor]
  contributorId: ID!
  cuCode: String!
  cuId: ID!
  id: ID!
  jobTitle: String
  startDate: String!
  _join: Query!
}

"""
Choose only one parameter from this list. Here you have the versatility of choosing the right argument according to your needs
"""
input ecosystem_ContributorCommitmentFilter {
  commitment: ecosystem_Commitment
  contributorId: ID
  cuCode: String
  cuId: ID
  id: ID
  jobTitle: String
  startDate: String
}

input ecosystem_ContributorFilter {
  discordHandle: String
  email: String
  forumHandle: String
  id: ID
  name: String
  twitterHandle: String
}

type ecosystem_CoreUnit {
  activityFeed(limit: Int, offset: Int): [ecosystem_ChangeTrackingEvent]
  "Information on the Users that are this Core Units' auditors"
  auditors: [ecosystem_User]
  "The ID of the budget that is assigned to this Core Unit"
  budgetId: ID
  "Access details on the budget statements of a Core Unit"
  budgetStatements: [ecosystem_BudgetStatement]
  "Type of core unit - Technical, Business, Support etc"
  category: [ecosystem_CoreUnitCategory]
  "Core Unit code - as defined within the Core Units' MIP39"
  code: String
  "Work basis of the FTE's within a Core Unit, use this field to access details of the FTE's contributing to a Core Unit"
  contributorCommitment: [ecosystem_ContributorCommitment]
  "Access details on the relevant GitHub contributions of a Core Unit"
  cuGithubContribution: [ecosystem_CuGithubContribution]
  "Access details on MIPs 39/40/41 of a Core Unit"
  cuMip: [ecosystem_CuMip]
  "Object containing data relating to updates provided by the Core Unit"
  cuUpdates: [ecosystem_CuUpdate]
  "id is autogenerated in the database"
  id: ID!
  "Logo image reference to swarm network. In case server is down, copy file reference and paste it in another swarm gateway link"
  image: String
  lastActivity: ecosystem_ChangeTrackingEvent
  "Link to the Legacy GitHub repository containing historical records of the Core Unit Budget Statement reports"
  legacyBudgetStatementUrl: String
  "Core Unit name - as as defined within the Core Units' MIP39"
  name: String
  "A more substantial description of the aims and the work to be performed by the Core Unit"
  paragraphDescription: String
  "Optional image provided by the Core Unit to give further context on the descriptions"
  paragraphImage: String
  "A short description of the mandate covered by the Core Unit"
  sentenceDescription: String
  "A shortened version of the Core Unit code"
  shortCode: String
  "Access details on the social media channels of a Core Unit"
  socialMediaChannels: [ecosystem_SocialMediaChannels]
  "ResouceType of the Core Unit"
  type: ecosystem_ResourceType
  _join: Query!
}

"""
Possible values for Core Unit categories - A Core Unit can be assigned to more than one category
"""
enum ecosystem_CoreUnitCategory {
  ActiveEcosystemActor
  AdvisoryCouncilMember
  Business
  Finance
  Growth
  Legal
  Operational
  RWAs
  ScopeFacilitator
  Support
  Technical
}

input ecosystem_CoreUnitFilter {
  "Use to filter on the full code of a Core Unit e.g. 'SES-001'"
  code: String
  "Use to filter on the automatically generated ID of a Core Unit"
  id: ID
  "Use to filter on the name of a Core Unit e.g. 'Sustainable Ecosystem Scaling'"
  name: String
  "Use to filter on the short code of a Core Unit e.g. 'SES'"
  shortCode: String
  "ResourceType of the Core Unit"
  type: ecosystem_ResourceType
}

input ecosystem_CoreUnitInput {
  code: String!
  name: String!
}

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar ecosystem_CountryCode

input ecosystem_CreateBudgetInput {
  amount: Float!
  code: String!
  currency: String!
  end: DateTime
  expenseCategoryId: ID
  name: String!
  parentId: ID
  start: DateTime!
}

type ecosystem_CuGithubContribution {
  cuId: ID
  githubOrg: [ecosystem_GithubOrg]
  githubRepo: [ecosystem_GithubRepo]
  id: ID!
  orgId: ID
  repoId: ID
  _join: Query!
}

input ecosystem_CuGithubContributionFilter {
  cuId: ID
  id: ID
  orgId: ID
  repoId: ID
}

type ecosystem_CuMip {
  "The date that the MIP was accepted by Maker governance"
  accepted: String
  "The ID of the Core Unit of which the MIP relates to"
  cuId: ID
  "The date that the MIP was formally submitted to Maker governance"
  formalSubmission: String
  "A link to the MakerDAO Governance Forum where this MIP is discussed"
  forumUrl: String
  "Automatically generated ID value"
  id: ID!
  "If applicatble - This object provides further information on specific information contained in the MIP39"
  mip39: [ecosystem_Mip39]
  "If applicatble - This object provides further information on specific information contained in the MIP40"
  mip40: [ecosystem_Mip40]
  "If applicatble - This object provides further information on specific information contained in the MIP41"
  mip41: [ecosystem_Mip41]
  "MIP code as defined within the MIP submitted to Maker governance"
  mipCode: String
  "If applicatble - Information on the MIP(s) that are repalaced by this later one"
  mipReplaces: [ecosystem_MipReplaces]
  "The current status of the MIP "
  mipStatus: ecosystem_CuMipStatus
  "The full title given to the MIP by the MIP creator"
  mipTitle: String
  "A link to the MIPs portal the full Maker Improvement Proposal (MIP) can be read"
  mipUrl: String
  "The date that the MIP was made obsolete - usually through being replaced by a newer MIP"
  obsolete: String
  "The date that the MIP was rejected by Maker governance"
  rejected: String
  "The date that the MIP was submitted for 'Request For Comments'"
  rfc: String
  _join: Query!
}

"""Used to filter the CuMip table response"""
input ecosystem_CuMipFilter {
  "Date that MIP was put in to accepted status"
  accepted: String
  "ID referencing to the corresponding entry in the Core Unit table"
  cuId: ID
  "Date that MIP was put in to formal submission status"
  formalSubmission: String
  "Automatically generated ID"
  id: ID
  "Full code assigned to MIP"
  mipCode: String
  "Current status of the MIP"
  mipStatus: ecosystem_CuMipStatus
  "Date that MIP was made obsolete"
  obsolete: String
  "Date that MIP was put in to rejected status"
  rejected: String
  "Date that MIP was put in to RFC status"
  rfc: String
}

"""Current status of the MIP - RFC, Accepted, Rejected etc"""
enum ecosystem_CuMipStatus {
  """MIP was accepted by Maker Governance"""
  Accepted
  """MIP has been formally submitted to Maker Governance for approval"""
  Formal
  """MIP was made obsolete"""
  Obsolete
  """Request For Comments"""
  RFC
  """MIP was rejected by Maker Governance"""
  Rejected
  Submission
  """MIP was withdrawn from submission"""
  Withdrawn
}

type ecosystem_CuUpdate {
  "The ID of the relevant Core Unit"
  cuId: ID!
  "Automatically generated ID"
  id: ID!
  "The date that the update was published"
  updateDate: String
  "The title of the update"
  updateTitle: String
  "A relevant link to where the update is hosted"
  updateUrl: String
  _join: Query!
}

"""Provid information of an update of a Core Unit"""
input ecosystem_CuUpdateFilter {
  "The ID of the relevant Core Unit"
  cuId: ID
  "Automatically generated ID"
  id: ID
  "The date that the update was published"
  updateDate: DateTime
  "The title of the update"
  updateTitle: String
  "A relevant link to where the update is hosted"
  updateUrl: String
}

"""
A field whose value conforms to the standard cuid format as specified in https://github.com/ericelliott/cuid#broken-down
"""
scalar ecosystem_Cuid

"""
A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
"""
scalar ecosystem_Currency

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar ecosystem_DID

type ecosystem_DataAndStamp {
  data: JSON
  timestamp: DateTime
  _join: Query!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar ecosystem_Duration

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar ecosystem_EmailAddress

type ecosystem_Error {
  message: String!
  _join: Query!
}

type ecosystem_Expense {
  actuals: Float
  budget: String
  budgetCap: Float
  category: String
  discontinued: Float
  period: String
  prediction: Float
  _join: Query!
}

type ecosystem_ExpenseCategory {
  headcountExpense: Boolean
  id: ID
  legacyCategory: ecosystem_CanonicalBudgetCategory
  name: String
  order: Int
  parentId: ID
  _join: Query!
}

type ecosystem_Expenses {
  expenses: [ecosystem_Expense]
  _join: Query!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar ecosystem_GUID

type ecosystem_GithubOrg {
  githubUrl: String!
  id: ID!
  org: String!
  _join: Query!
}

input ecosystem_GithubOrgFilter {
  githubUrl: String
  id: ID
  org: String
}

type ecosystem_GithubRepo {
  githubUrl: String!
  id: ID!
  repo: String!
  _join: Query!
}

input ecosystem_GithubRepoFilter {
  githubUrl: String
  id: ID
  repo: String
}

enum ecosystem_Granularity {
  annual
  monthly
  quarterly
  total
}

"""
A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
"""
scalar ecosystem_HSL

"""
A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().
"""
scalar ecosystem_HSLA

"""
A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
"""
scalar ecosystem_HexColorCode

"""
A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.
"""
scalar ecosystem_Hexadecimal

"""
A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.
"""
scalar ecosystem_IBAN

"""
A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
"""
scalar ecosystem_IPv4

"""
A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.
"""
scalar ecosystem_IPv6

"""
A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.
"""
scalar ecosystem_ISBN

"""
A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar ecosystem_ISO8601Duration

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar ecosystem_JSONObject

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar ecosystem_JWT

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar ecosystem_Latitude

input ecosystem_LineItemUpdateInput {
  actual: Float
  budgetCap: Float
  budgetCategory: String
  budgetStatementWalletId: ID
  canonicalBudgetCategory: ecosystem_CanonicalBudgetCategory
  comments: String
  currency: String
  forecast: Float
  group: String
  headcountExpense: Boolean
  id: ID
  month: String
  payment: Float
  position: Int
}

input ecosystem_LineItemsBatchAddInput {
  actual: Float
  budgetCap: Float
  budgetCategory: String
  budgetStatementWalletId: ID
  canonicalBudgetCategory: String
  comments: String
  cuId: ID
  currency: String
  forecast: Float
  group: String
  headcountExpense: Boolean
  month: String
  ownerType: String
  payment: Float
  position: Int
}

input ecosystem_LineItemsBatchDeleteInput {
  actual: Float
  budgetCategory: String
  budgetStatementWalletId: ID
  canonicalBudgetCategory: String
  comments: String
  cuId: ID
  currency: String
  forecast: Float
  group: String
  headcountExpense: Boolean
  id: ID
  month: String
  ownerType: String
  position: Int
}

input ecosystem_LineItemsBatchUpdateInput {
  actual: Float
  budgetCap: Float
  budgetCategory: String
  budgetStatementWalletId: ID
  canonicalBudgetCategory: ecosystem_CanonicalBudgetCategory
  comments: String
  cuId: ID
  currency: String
  forecast: Float
  group: String
  headcountExpense: Boolean
  id: ID
  month: String
  ownerType: String
  payment: Float
  position: Int
}

"""
A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.
"""
scalar ecosystem_LocalDate

"""
A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.
"""
scalar ecosystem_LocalEndTime

"""
A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.
"""
scalar ecosystem_LocalTime

"""The locale in the format of a BCP 47 (RFC 5646) standard string"""
scalar ecosystem_Locale

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar ecosystem_Long

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar ecosystem_Longitude

"""
A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.
"""
scalar ecosystem_MAC

type ecosystem_MakerGithubEcosystem {
  commits4w: Int!
  cuGithubRepoId: ID!
  date: String!
  id: ID!
  makerRepoId: ID!
  org: Int!
  repo: Int!
  totalStars: Int!
  uniqueContributors: Int!
  url: String!
  _join: Query!
}

input ecosystem_MakerGithubEcosystemFilter {
  commits4w: Int
  cuGithubRepoId: ID
  date: String
  id: ID
  makerRepoId: ID
  org: Int
  repo: Int
  totalStars: Int
  uniqueContributors: Int
  url: String
}

type ecosystem_Mip39 {
  "The Core Unit name as defined within the MIP39"
  cuName: String!
  "Automatically generated ID"
  id: ID!
  "The SPN of the MIP39"
  mip39Spn: Int!
  "The full MIP code"
  mipCode: String!
  "ID referencing to the corresponding entry in the CuMip table"
  mipId: ID!
  "A more substantial description of the aims and the work to be performed by the Core Unit"
  paragraphSummary: String!
  "A short description of the mandate covered by the Core Unit"
  sentenceSummary: String!
  _join: Query!
}

"""Used to filter the Mip39 table response"""
input ecosystem_Mip39Filter {
  cuName: String
  id: ID
  mip39Spn: Int
  mipCode: String
  mipId: ID
  paragraphSummary: String
  sentenceSummary: String
}

type ecosystem_Mip40 {
  "ID referencing to the corresponding entry in the CuMip table"
  cuMipId: ID!
  "Automatically generated ID"
  id: ID!
  "An object containing further information on the period to which the MIP40 is relevant"
  mip40BudgetPeriod: [ecosystem_Mip40BudgetPeriod]
  "The SPN of the MIP40"
  mip40Spn: String
  "An object containing further information on the wallet(s) defined in the MIP40"
  mip40Wallet: [ecosystem_Mip40Wallet]
  "A boolean value signifying whether the MIP40 relates only to an MKR budget"
  mkrOnly: Boolean
  "The length of the MKR incentive plan defined within the MIP40"
  mkrProgramLength: Float
  _join: Query!
}

type ecosystem_Mip40BudgetLineItem {
  "The budget cap defined for the corresponding line item"
  budgetCap: Float!
  "The name of the budget category used within the MIP40"
  budgetCategory: String!
  "The expense type as defined within the Strategic Finance Chart of Accounts"
  canonicalBudgetCategory: ecosystem_CanonicalBudgetCategory
  "If relevant - the sub-group that this expense is relevant for e.g. if the expense is for a sub-team within the Core Unit"
  group: String
  "Boolean value defining whether the expense is a headcount expense"
  headcountExpense: Boolean
  "Automatically generated ID"
  id: ID!
  "ID referencing to the corresponding entry in the Mip40Wallet table"
  mip40WalletId: ID
  position: Int!
  _join: Query!
}

"""Used to filter the Mip40BudgetLineItem table response"""
input ecosystem_Mip40BudgetLineItemFilter {
  budgetCap: Int
  budgetCategory: String
  canonicalBudgetCategory: String
  group: String
  headcountExpense: Boolean
  id: ID
  mip40WalletId: ID
  position: Int
}

type ecosystem_Mip40BudgetPeriod {
  "The end of the period that the budget will be relevant for"
  budgetPeriodEnd: String!
  "The start of the period that the budget will be relevant for"
  budgetPeriodStart: String!
  "The predicted number of fte's for the budget period as set out in the MIP40"
  ftes: Float!
  "Automatically generated ID"
  id: ID!
  "ID referencing to the corresponding entry in the Mip40 table"
  mip40Id: ID!
  _join: Query!
}

"""Used to filter the Mip40BudgetPeriod table response"""
input ecosystem_Mip40BudgetPeriodFilter {
  budgetPeriodEnd: String
  budgetPeriodStart: String
  ftes: Int
  id: ID
  mip40Id: ID
}

"""Used to filter the Mip40 table response"""
input ecosystem_Mip40Filter {
  cuMipId: ID
  id: ID
  mip40Spn: String
  mkrOnly: Boolean
  mkrProgramLength: Float
}

type ecosystem_Mip40Wallet {
  "The ETH wallet address as defined in the MIP40"
  address: String!
  clawbackLimit: Float
  "Automatically generated ID"
  id: ID!
  "An object containing further information on the individual budget line items of the MIP40 budget"
  mip40BudgetLineItem: [ecosystem_Mip40BudgetLineItem]
  "ID referencing to the corresponding entry in the Mip40 table"
  mip40Id: ID!
  "The wallet name as defined in the MIP40"
  name: String!
  "The total number of signers required to sign a transaction for the multi-sig address"
  signersRequired: Int!
  "The total number of signers for the multi-sig address"
  signersTotal: Int!
  _join: Query!
}

"""Used to filter the Mip40Wallet table response"""
input ecosystem_Mip40WalletFilter {
  address: String
  clawbackLimit: Float
  id: ID
  mip40Id: ID
  name: String
  signersRequired: Int
  signersTotal: Int
}

type ecosystem_Mip41 {
  contributor: [ecosystem_Contributor]
  "ID referencing to the corresponding entry in the Contributor table"
  contributorId: ID
  "ID referencing to the corresponding entry in the CuMip table"
  cuMipId: ID!
  "Automatically generated ID"
  id: ID!
  _join: Query!
}

"""Used to filter the Mip41 table response"""
input ecosystem_Mip41Filter {
  contributorId: ID
  cuMipId: ID
  id: ID
}

input ecosystem_MipReplaceFilter {
  id: ID
  newMip: ID
  replacedMip: ID
}

type ecosystem_MipReplaces {
  id: ID!
  newMip: ID!
  replacedMip: ID!
  _join: Query!
}

"""Floats that will have a value less than 0."""
scalar ecosystem_NegativeFloat

"""Integers that will have a value less than 0."""
scalar ecosystem_NegativeInt

"""A string that cannot be passed as an empty value"""
scalar ecosystem_NonEmptyString

"""Floats that will have a value of 0 or more."""
scalar ecosystem_NonNegativeFloat

"""Integers that will have a value of 0 or more."""
scalar ecosystem_NonNegativeInt

"""Floats that will have a value of 0 or less."""
scalar ecosystem_NonPositiveFloat

"""Integers that will have a value of 0 or less."""
scalar ecosystem_NonPositiveInt

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ecosystem_ObjectID

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar ecosystem_PhoneNumber

"""
A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports
"""
scalar ecosystem_Port

"""Floats that will have a value greater than 0."""
scalar ecosystem_PositiveFloat

"""Integers that will have a value greater than 0."""
scalar ecosystem_PositiveInt

"""
A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.
"""
scalar ecosystem_PostalCode

"""
A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
"""
scalar ecosystem_RGB

"""
A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().
"""
scalar ecosystem_RGBA

type ecosystem_RecognizedDelegate {
  image: String
  latestVotingContract: String
  name: String
  socials: ecosystem_Social
  _join: Query!
}

enum ecosystem_ResourceType {
  AlignedDelegates
  CoreUnit
  Delegates
  EcosystemActor
  System
}

type ecosystem_Role {
  "Automatically generated ID"
  id: ID
  "Name of the role"
  name: String
  "Object containing further information on the permissions available to role"
  permissions: [String]
  _join: Query!
}

"""
In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit code to identify the financial institution.
"""
scalar ecosystem_RoutingNumber

"""
The `SafeInt` scalar type represents non-fractional signed whole numeric values that are considered safe as defined by the ECMAScript specification.
"""
scalar ecosystem_SafeInt

type ecosystem_Scope {
  code: String
  id: ID!
  name: String
  _join: Query!
}

type ecosystem_Snapshot {
  actualsComparison: [ecosystem_ActualsComparison]
  end: DateTime
  id: ID!
  ownerId: ID
  ownerType: String
  period: String
  snapshotAccount: [ecosystem_SnapshotAccount]
  start: DateTime
  _join: Query!
}

type ecosystem_SnapshotAccount {
  accountAddress: String
  accountLabel: String
  accountType: String
  groupAccountId: ID
  id: ID!
  offChain: Boolean
  snapshotAccountBalance: [ecosystem_SnapshotAccountBalance]
  snapshotAccountTransaction: [ecosystem_SnapshotAccountTransaction]
  upstreamAccountId: ID
  _join: Query!
}

type ecosystem_SnapshotAccountBalance {
  id: ID!
  includesOffChain: Boolean
  inflow: Float
  initialBalance: Float
  newBalance: Float
  outflow: Float
  token: String
  _join: Query!
}

type ecosystem_SnapshotAccountTransaction {
  amount: Float
  block: Int
  counterParty: String
  counterPartyName: String
  id: ID!
  timestamp: DateTime
  token: String
  txHash: String
  txLabel: String
  _join: Query!
}

input ecosystem_SnapshotFilter {
  id: ID
  ownerId: ID
  ownerType: String!
  period: String
}

type ecosystem_Social {
  forumPlatform: String
  forumProfile: String
  twitter: String
  votingPortal: String
  youtube: String
  _join: Query!
}

type ecosystem_SocialMediaChannels {
  cuId: String
  discord: String
  forumTag: String
  github: String
  id: ID!
  linkedIn: String
  twitter: String
  website: String
  youtube: String
  _join: Query!
}

input ecosystem_SocialMediaChannelsFilter {
  cuId: String
  discord: String
  forumTag: String
  github: String
  id: ID
  linkedIn: String
  twitter: String
  website: String
  youtube: String
}

type ecosystem_Source {
  code: String
  title: String
  url: String
  _join: Query!
}

type ecosystem_Target {
  amount: Float
  calculation: String
  description: String
  source: ecosystem_Source
  _join: Query!
}

type ecosystem_Team {
  "Information on the Users that are this Teams' auditors"
  auditors: [ecosystem_User]
  "The ID of the budget that is assigned to this Team"
  budgetId: ID
  "Access details on the budget statements of a Team"
  budgetStatements: [ecosystem_BudgetStatement]
  "Type of Team - Technical, Business, Support etc"
  category: [ecosystem_TeamCategory]
  "Team code - as defined within the Teams' MIP39"
  code: String
  "Work basis of the FTE's within a Team, use this field to access details of the FTE's contributing to a Team"
  contributorCommitment: [ecosystem_ContributorCommitment]
  "Access details on the relevant GitHub contributions of a Team"
  cuGithubContribution: [ecosystem_CuGithubContribution]
  "Access details on MIPs 39/40/41 of a Core Unit"
  cuMip: [ecosystem_CuMip]
  "id is autogenerated in the database"
  id: ID!
  "Logo image reference to swarm network. In case server is down, copy file reference and paste it in another swarm gateway link"
  image: String
  "Link to the Legacy GitHub repository containing historical records of the Team Budget Statement reports"
  legacyBudgetStatementUrl: String
  "Team name - as as defined within the Teams' MIP39"
  name: String
  "A more substantial description of the aims and the work to be performed by the Team"
  paragraphDescription: String
  "Optional image provided by the Team to give further context on the descriptions"
  paragraphImage: String
  scopes: [ecosystem_Scope]
  "A short description of the mandate covered by the Team"
  sentenceDescription: String
  "A shortened version of the Team code"
  shortCode: String
  "Access details on the social media channels of a Team"
  socialMediaChannels: [ecosystem_SocialMediaChannels]
  "ResouceType of the Team"
  type: ecosystem_ResourceType
  "Object containing data relating to updates provided by the Team"
  updates: [ecosystem_TeamUpdate]
  _join: Query!
}

"""
Possible values for Team categories - A Team can be assigned to more than one category
"""
enum ecosystem_TeamCategory {
  ActiveEcosystemActor
  AdvisoryCouncilMember
  Business
  Finance
  Growth
  Legal
  Operational
  RWAs
  ScopeFacilitator
  Support
  Technical
}

input ecosystem_TeamFilter {
  "Use to filter on the full code of a Team e.g. 'SES-001'"
  code: String
  "Use to filter on the automatically generated ID of a Team"
  id: ID
  "Use to filter on the name of a Team e.g. 'Sustainable Ecosystem Scaling'"
  name: String
  "Use to filter on the short code of a Team e.g. 'SES'"
  shortCode: String
  "ResourceType of the Team"
  type: ecosystem_ResourceType
}

type ecosystem_TeamUpdate {
  "The ID of the relevant Team"
  cuId: ID!
  "Automatically generated ID"
  id: ID!
  "The date that the update was published"
  updateDate: String
  "The title of the update"
  updateTitle: String
  "A relevant link to where the update is hosted"
  updateUrl: String
  _join: Query!
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones
"""
scalar ecosystem_TimeZone

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar ecosystem_Timestamp

type ecosystem_TotalQuarterlyExpenses {
  reports: ecosystem_Expenses
  _join: Query!
}

type ecosystem_TwitterFollowers {
  followerCount: Int!
  id: ID!
  month: String!
  twitterAccount: String!
  twitterAccountId: ID!
  _join: Query!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar ecosystem_URL

"""A currency string, such as $21.25"""
scalar ecosystem_USCurrency

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

"""Floats that will have a value of 0 or more."""
scalar ecosystem_UnsignedFloat

"""Integers that will have a value of 0 or more."""
scalar ecosystem_UnsignedInt

input ecosystem_UpdateBudgetCapInput {
  amount: Float
  currency: String
  expenseCategoryId: ID
  id: ID!
}

input ecosystem_UpdateBudgetInput {
  code: String
  end: DateTime
  id: ID!
  name: String
  parentId: ID
  start: DateTime
}

"""Provid information of an update of a Team"""
input ecosystem_UpdateFilter {
  "The ID of the relevant Team"
  cuId: ID
  "Automatically generated ID"
  id: ID
  "The date that the update was published"
  updateDate: DateTime
  "The title of the update"
  updateTitle: String
  "A relevant link to where the update is hosted"
  updateUrl: String
}

input ecosystem_UpdatePassword {
  "The new password value you wish to set"
  newPassword: String!
  "The old password value you wish to change"
  password: String!
  "Username of the account you wish to change the password of"
  username: String!
}

type ecosystem_User {
  "Boolean value describing whether a user is active"
  active: Boolean
  "Automatically generated ID"
  id: ID
  "Object containing further details on the roles assigned to a user"
  roles: [ecosystem_Role]
  "Username"
  username: String
  _join: Query!
}

type ecosystem_UserActivity {
  "String containing details of the collection to which the user activity corresponds"
  collection: String
  "Optional JSON object with providing further information on the user activity"
  data: JSON
  "Automatically generated ID"
  id: ID!
  "If applicable - reference information on the previous user activity"
  lastVisit: DateTime
  "The ID of the relevant User"
  userId: ID!
  _join: Query!
}

"""Allows for filtering of the UserActivity object"""
input ecosystem_UserActivityFilter {
  "Filter with for all activity within a specific collection"
  collection: String
  "Filter with for all activity of a specific user"
  userId: ID
}

input ecosystem_UserActivityUpdateInput {
  collection: String!
  data: JSON
  timestamp: DateTime
  userId: ID!
}

type ecosystem_UserActivityUpdatePayload {
  collection: String
  current: ecosystem_DataAndStamp
  id: ID
  previous: ecosystem_DataAndStamp
  userId: ID
  _join: Query!
}

input ecosystem_UserDelete {
  id: ID
}

input ecosystem_UserInput {
  "Input password of the account you wish to login to"
  password: String!
  "Input username of the account you wish to login to"
  username: String!
}

type ecosystem_UserPayload {
  authToken: String!
  user: ecosystem_User
  _join: Query!
}

input ecosystem_UserSetActiveFlag {
  active: Boolean!
  id: ID!
}

input ecosystem_UsersFilter {
  id: ID
  username: String
}

"""
A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
"""
scalar ecosystem_UtcOffset

"""Represents NULL values"""
scalar ecosystem_Void

type ecosystem_YoutubeFollowers {
  followerCount: Int!
  id: ID!
  month: String!
  youtubeAccount: String!
  youtubeId: ID!
  _join: Query!
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

"""Well known claims - https://www.iana.org/assignments/jwt/jwt.xhtml"""
enum WG_CLAIM {
  """iss"""
  ISSUER
  """deprecated alias for ISSUER"""
  PROVIDER
  """sub"""
  SUBJECT
  """alias for sub"""
  USERID
  """name"""
  NAME
  """given_name"""
  GIVEN_NAME
  """family_name"""
  FAMILY_NAME
  """middle_name"""
  MIDDLE_NAME
  """nickname"""
  NICKNAME
  """preferred_username"""
  PREFERRED_USERNAME
  """profile"""
  PROFILE
  """picture"""
  PICTURE
  """website"""
  WEBSITE
  """email"""
  EMAIL
  """email_verified"""
  EMAIL_VERIFIED
  """gender"""
  GENDER
  """birthdate"""
  BIRTH_DATE
  """zoneinfo"""
  ZONE_INFO
  """locale"""
  LOCALE
  """location"""
  LOCATION
}

enum WunderGraphDateTimeFormat {
  "2006-01-02T15:04:05-0700"
  ISO8601
  "Mon Jan _2 15:04:05 2006"
  ANSIC
  "Mon Jan _2 15:04:05 MST 2006"
  UnixDate
  "Mon Jan 02 15:04:05 -0700 2006"
  RubyDate
  "02 Jan 06 15:04 MST"
  RFC822
  "02 Jan 06 15:04 -0700"
  RFC822Z
  "Monday, 02-Jan-06 15:04:05 MST"
  RFC850
  "Mon, 02 Jan 2006 15:04:05 MST"
  RFC1123
  "Mon, 02 Jan 2006 15:04:05 -0700"
  RFC1123Z
  "2006-01-02T15:04:05Z07:00"
  RFC3339
  "2006-01-02T15:04:05.999999999Z07:00"
  RFC3339Nano
  "3:04PM"
  Kitchen
  "Jan _2 15:04:05"
  Stamp
  "Jan _2 15:04:05.000"
  StampMilli
  "Jan _2 15:04:05.000000"
  StampMicro
  "Jan _2 15:04:05.000000000"
  StampNano
}