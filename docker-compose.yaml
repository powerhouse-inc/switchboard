version: "3"

services:
  database:
    restart: unless-stopped
    image: postgres:15
    ports:
      - 5444:5432
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_PORT: "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 5

  api:
    restart: unless-stopped
    expose:
      - 3000
    build:
      context: ./api
    environment:
      DATABASE_URL: "postgres://postgres:postgres@database:5432/postgres?sslmode=disable&connect_timeout=30"
      API_ORIGIN: http://localhost:3000
      AUTH_SIGNUP_ENABLED: "1"
      JWT_SECRET: replace_in_production_with_actual_secret
      JWT_EXPIRATION_PERIOD_SECONDS: 3600
      API_GQL_ENDPOINT: "http://localhost:3000"
      PORT: 3000
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://api:3000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy

  frontend:
    restart: unless-stopped
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_SWITCHBOARD_GRAPHQL_HOST: "http://localhost:3000"
    environment:
      NEXT_PUBLIC_SWITCHBOARD_GRAPHQL_HOST: "http://localhost:3000"
    expose:
      - 3000
    depends_on:
      api:
        condition: service_healthy

  wundergraph:
    platform: linux/amd64
    restart: unless-stopped
    expose:
      - 3000
    build:
      context: ./wundergraph
    environment:
      SWITCHBOARD_GQL_ENDPOINT: "http://api:3000/drives"
    depends_on:
      api:
        condition: service_healthy

  reverse-proxy:
    restart: unless-stopped
    build:
      context: ./nginx
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      FRONTEND: "http://frontend:3000"
      BACKEND: "http://api:3000"
      WUNDERGRAPH: "http://wundergraph:3000"
    depends_on:
      - api
      - frontend
      - wundergraph
